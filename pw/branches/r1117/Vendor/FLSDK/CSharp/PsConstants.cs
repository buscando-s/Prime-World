#define PS_PROJECT_GUID_HASH
#define PS_PROJECT_GUID_HASH_A
#define PS_PROJECT_GUID_HASH_W
#define PS_PROJECT_GUID_HASH_RA
#define PS_PROJECT_GUID_HASH_RW
#define PS_PROJECT_GUID_HASH_OF_STRING
#define PS_PROJECT_GUID_HASH_OF_STRING_A
#define PS_PROJECT_GUID_HASH_OF_STRING_W
#define PS_PROJECT_GUID_HASH_OF_STRING_RA
#define PS_PROJECT_GUID_HASH_OF_STRING_RW
#define PS_ACTION_GUID_A
#define PS_ACTION_GUID_W
#define PS_ACTION_GUID_RA
#define PS_ACTION_GUID_RW
#define PS_BUILD_INFO_A
#define PS_BUILD_INFO_W
#define PS_BUILD_INFO_RA
#define PS_BUILD_INFO_RW
#define PS_VERSION_MAJOR
#define PS_VERSION_MINOR
#define PS_VERSION_BUILD
#define PS_VERSION_HOTFIX
#define PS_VERSION_A
#define PS_VERSION_W
#define PS_VERSION_RA
#define PS_VERSION_RW
#define PS_VERSION_MODULE_A
#define PS_VERSION_MODULE_W
#define PS_VERSION_MODULE_RA
#define PS_VERSION_MODULE_RW
#define PS_VERSION_PRODUCT_A
#define PS_VERSION_PRODUCT_W
#define PS_VERSION_PRODUCT_RA
#define PS_VERSION_PRODUCT_RW
#define PS_HOST_MODULE_NAME_A
#define PS_HOST_MODULE_NAME_W
#define PS_HOST_MODULE_NAME_RA
#define PS_HOST_MODULE_NAME_RW
#define PS_USER_INTERFACE_MODULE_NAME_A
#define PS_USER_INTERFACE_MODULE_NAME_W
#define PS_USER_INTERFACE_MODULE_NAME_RA
#define PS_USER_INTERFACE_MODULE_NAME_RW
#define PS_HELPER_MODULE_NAME_A
#define PS_HELPER_MODULE_NAME_W
#define PS_HELPER_MODULE_NAME_RA
#define PS_HELPER_MODULE_NAME_RW
#define SDK
#define PS_NO_BINDING_SUPPORTED
#define PS_BINDING_CHECK_LAST_RUN_TIME
#define PS_BINDING_CONTINUE_EXECUTION_AFTER_LICENSE_EXPIRATION
#define PS_BINDING_UPDATE_RUN_TIME_DATA_DURING_EXECUTION
#define PS_BINDING_CHECK_STARTUP_TIME
#define PS_SIMPLE_INITIALIZATION_SUPPORTED
#define PS_DEFAULT_INITIALIZATION_TYPE
#define PS_DRIVER_NAME_A
#define PS_DRIVER_NAME_W
#define PS_DRIVER_NAME_RA
#define PS_DRIVER_NAME_RW
#define PS_DRIVER_MODULE_NAME_A
#define PS_DRIVER_MODULE_NAME_W
#define PS_DRIVER_MODULE_NAME_RA
#define PS_DRIVER_MODULE_NAME_RW
#define PS_DRIVER_FRIENDLY_NAME_A
#define PS_DRIVER_FRIENDLY_NAME_W
#define PS_DRIVER_FRIENDLY_NAME_RA
#define PS_DRIVER_FRIENDLY_NAME_RW
#define PS_DRIVER_UNIQUE_FRIENDLY_NAME_A
#define PS_DRIVER_UNIQUE_FRIENDLY_NAME_W
#define PS_DRIVER_UNIQUE_FRIENDLY_NAME_RA
#define PS_DRIVER_UNIQUE_FRIENDLY_NAME_RW
#define PS_DRIVER_DEBUG_OUTPUT_PREFIX_A
#define PS_DRIVER_DEBUG_OUTPUT_PREFIX_W
#define PS_DRIVER_DEBUG_OUTPUT_PREFIX_RA
#define PS_DRIVER_DEBUG_OUTPUT_PREFIX_RW
#define PS_DRIVER_FS_NAME_A
#define PS_DRIVER_FS_NAME_W
#define PS_DRIVER_FS_NAME_RA
#define PS_DRIVER_FS_NAME_RW
#define PS_DRIVER_FS_MODULE_NAME_A
#define PS_DRIVER_FS_MODULE_NAME_W
#define PS_DRIVER_FS_MODULE_NAME_RA
#define PS_DRIVER_FS_MODULE_NAME_RW
#define PS_DRIVER_FS_FRIENDLY_NAME_A
#define PS_DRIVER_FS_FRIENDLY_NAME_W
#define PS_DRIVER_FS_FRIENDLY_NAME_RA
#define PS_DRIVER_FS_FRIENDLY_NAME_RW
#define PS_DRIVER_FS_UNIQUE_FRIENDLY_NAME_A
#define PS_DRIVER_FS_UNIQUE_FRIENDLY_NAME_W
#define PS_DRIVER_FS_UNIQUE_FRIENDLY_NAME_RA
#define PS_DRIVER_FS_UNIQUE_FRIENDLY_NAME_RW
#define PS_DRIVER_FS_DEBUG_OUTPUT_PREFIX_A
#define PS_DRIVER_FS_DEBUG_OUTPUT_PREFIX_W
#define PS_DRIVER_FS_DEBUG_OUTPUT_PREFIX_RA
#define PS_DRIVER_FS_DEBUG_OUTPUT_PREFIX_RW
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_NAME_A
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_NAME_W
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_NAME_RA
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_NAME_RW
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_MODULE_NAME_A
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_MODULE_NAME_W
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_MODULE_NAME_RA
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_MODULE_NAME_RW
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_FRIENDLY_NAME_A
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_FRIENDLY_NAME_W
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_FRIENDLY_NAME_RA
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_FRIENDLY_NAME_RW
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_UNIQUE_FRIENDLY_NAME_A
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_UNIQUE_FRIENDLY_NAME_W
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_UNIQUE_FRIENDLY_NAME_RA
#define PS_DRIVER_AUTO_REMOVAL_SERVICE_UNIQUE_FRIENDLY_NAME_RW
#define PS_DRIVER_UPDATE_HOST_A
#define PS_DRIVER_UPDATE_HOST_W
#define PS_DRIVER_UPDATE_HOST_RA
#define PS_DRIVER_UPDATE_HOST_RW
#define PS_DRIVER_UPDATE_PORT_A
#define PS_DRIVER_UPDATE_PORT_W
#define PS_DRIVER_UPDATE_PORT_RA
#define PS_DRIVER_UPDATE_PORT_RW
#define PS_DRIVER_UPDATE_PATH_A
#define PS_DRIVER_UPDATE_PATH_W
#define PS_DRIVER_UPDATE_PATH_RA
#define PS_DRIVER_UPDATE_PATH_RW
#define OPTION_X8632_SUPPORT
#define PS_TARGET_PLATFORM_X8632
#define USER_KEY_REGISTRY_HKEY
#define USER_KEY_REGISTRY_PATH_A
#define USER_KEY_REGISTRY_PATH_W
#define USER_KEY_REGISTRY_PATH_RA
#define USER_KEY_REGISTRY_PATH_RW
#define RELEASE_TIME
#define PS_BINDING_NONE_NONCOMMERCIAL
#define PS_BINDING_NONE_NONCOMMERCIAL_LIFETIME
#define PS_NAG_SCREEN_HARDWARE_LIFE_TIME
#define PS_NAG_SCREEN_HARDWARE_NUMBER_OF_RUNS
#define PS_NAG_SCREEN_HARDWARE_EXECUTION_TIME
#define PS_COMPANY_NAME_A
#define PS_COMPANY_NAME_W
#define PS_COMPANY_NAME_RA
#define PS_COMPANY_NAME_RW
#define PS_PRODUCT_NAME_A
#define PS_PRODUCT_NAME_W
#define PS_PRODUCT_NAME_RA
#define PS_PRODUCT_NAME_RW
#define PS_COPYRIGHT_A
#define PS_COPYRIGHT_W
#define PS_COPYRIGHT_RA
#define PS_COPYRIGHT_RW
#define TRADE_NAME_A
#define TRADE_NAME_W
#define TRADE_NAME_RA
#define TRADE_NAME_RW
#define PS_GUI_SHOW_BUY_BUTTON
#define PS_SHOW_DEACTIVATION_HYPERLINK
#define PS_SHOW_PROGRESS_BAR
#define OPTION_DRVINSTALL_QUESTION
#define PS_DISPLAY_DRIVERS_FAQ
#define OPTION_GUI_USE_SHIFT_KEY_FOR_KEY_ENTERING
#define OPTION_GUI_USE_CONTROL_KEY_FOR_KEY_ENTERING
#define OPTION_COLLECT_SYSTEM_INFORMATION
#define PS_USER_CAN_SELECT_LANGUAGE
#define PS_SHOW_HELP
#define PS_BUILD_TYPE
#define PS_BUILD_TYPE_SPECIAL
#define PS_BUILD_TYPE_NAME_A
#define PS_BUILD_TYPE_NAME_W
#define PS_BUILD_TYPE_NAME_RA
#define PS_BUILD_TYPE_NAME_RW
#define OPTION_CHECK_PROTECTION_LIBRARY_HEADER
#define OPTION_DETECT_PC_EMULATORS
#define OPTION_RESTRICT_PROCESS_OWNERS
#define OPTION_USE_ERROR_STACK_SIGNATURE
#define PS_SUPPORT_CRYPTED_TRAFFIC
#define PS_APPLICATION_EVENT_LOG_NAME_A
#define PS_APPLICATION_EVENT_LOG_NAME_W
#define PS_APPLICATION_EVENT_LOG_NAME_RA
#define PS_APPLICATION_EVENT_LOG_NAME_RW
#define PS_PROTECTED_MODULES
#define PS_PROTECTION_LIBRARY_A
#define PS_PROTECTION_LIBRARY_W
#define PS_PROTECTION_LIBRARY_RA
#define PS_PROTECTION_LIBRARY_RW
#define PS_SET_FOREGROUND_WINDOW_UNDER_VISTA
#define OPTION_ALLOW_SYSTEM_DEBUGGERS
#define OPTION_ALLOW_USER_DEBUGGERS
#define MEMORY_MANAGER_RANDOMIZATION
#define PS_BUILD_FULL_PROJECT

//
//	PsConstants.cs
//
//	Description:
//		Constants for SDK (status codes, process exit codes, initialization types).
//

//
//	I. Status codes
//

//
//	Types of status:
//		Fatal error with user message:		0xE100XXXX (PSC_FATAL_XXX)
//		Error with user message:	        0xA100XXXX (PSC_ERROR_XXX)
//		(Fatal) error without user message	0xE200XXXX (PSC_STATUS_XXX)
//		Error (NTSTATUS)					0xCXXXXXXX (PSC_STATUS_XXX)
//		Warning (NTSTATUS)					0x8XXXXXXX (PSC_STATUS_XXX)
//		Information (NTSTATUS)				0x4XXXXXXX (PSC_STATUS_XXX)
//		Success (NTSTATUS)					0x0XXXXXXX (PSC_STATUS_XXX)
//

using System;

namespace ProtectionApi
{
	class PsConstants
	{
		// Common status codes common with NTSTATUS (without messages)
		public const UInt32 PSC_STATUS_SUCCESS = 0x00000000;
		public const UInt32 PSC_STATUS_UNSUCCESSFUL = 0xC0000001;
		public const UInt32 PSC_STATUS_INVALID_HANDLE = 0xC0000008;
		public const UInt32 PSC_STATUS_INVALID_PARAMETER = 0xC000000D;
		public const UInt32 PSC_STATUS_ACCESS_DENIED = 0xC0000022;
		public const UInt32 PSC_STATUS_BUFFER_TOO_SMALL = 0xC0000023;

		// Common error codes (with messages)
#if PS_USE_LOCAL_MACHINE_STORAGE
public const UInt32 PSC_FATAL_REGISTRY_ACCESS_ERROR = 0xE1003018;
#else
		public const UInt32 PSC_FATAL_REGISTRY_ACCESS_ERROR = 0xE1003003;
#endif
		public const UInt32 PSC_FATAL_HARDWARE_ACCESS_ERROR = 0xE1003024;

		// License control status codes (without messages)
		public const UInt32 PSC_STATUS_LICENSE_NOT_FOUND = 0xE2000001;
		public const UInt32 PSC_STATUS_INVALID_ACTIVATION_KEY = 0xE2000004;
		public const UInt32 PSC_STATUS_KEY_IS_INVALID = 0xE2000005;
		public const UInt32 PSC_STATUS_VALID_HARDWARE_KEY = 0xE2000007;
		public const UInt32 PSC_STATUS_NEW_TRIAL_LICENSE_CREATED = 0xE2000008;
		public const UInt32 PSC_STATUS_LICENSE_ALREADY_DEACTIVATED = 0xE2000009;
		public const UInt32 PSC_STATUS_START_IN_TRIAL_MODE_IS_NOT_ALLOWED = 0xE200000D;
		public const UInt32 PSC_STATUS_UNABLE_TO_REGISTER_MESSAGE_DLL = 0xE2000013;

		// Driver errors (with messages)
		public const UInt32 PSC_FATAL_DRIVER_USAGE_CONFLICT = 0xE100300F;
		public const UInt32 PSC_FATAL_DRIVER_DEBUGGER_DETECTED = 0xE1003007;
		public const UInt32 PSC_FATAL_DRIVER_SAFE_MODE_DETECTED = 0xE1003019;
		public const UInt32 PSC_FATAL_DRIVER_INCOMPATIBLE_OS = 0xE1003002;
		public const UInt32 PSC_FATAL_DRIVER_ERROR = 0xE1003020;

		// Internal status codes (without messages)
		public const UInt32 PSC_STATUS_DRIVERS_INSTALLATION_CANCELLED = 0x21000004;
		public const UInt32 PSC_STATUS_RESELECT_INITILIZATION_TYPE = 0x21000001;
		public const UInt32 PSC_STATUS_SUCCESS_NON_COMMERCIAL_KEY = 0x21000002;
		public const UInt32 PSC_STATUS_SET_INITIALIZATION_TYPE_DISC_WITH_BACKUP_DISC_MODE = 0x21000003;
		public const UInt32 PSC_STATUS_CALL_ACTIVATOR = 0x21000005;

		// Internal error codes (without messages)
		public const UInt32 PSC_STATUS_ABORTED_BY_USER = 0xE2000014;
		public const UInt32 PSC_STATUS_RETRY_REQUIRED_BY_USER = 0xE2000015;
		public const UInt32 PSC_STATUS_BAD_FORMAT = 0xE200000E;
		public const UInt32 PSC_STATUS_ERROR_IN_WINAPI = 0xE200000F;
		public const UInt32 PSC_STATUS_ALREADY_OPENED = 0xE2000010;
		public const UInt32 PSC_STATUS_UNABLE_TO_GET_TIME = 0xE2000016;
		public const UInt32 PSC_STATUS_MEMORY_LOCKING_FAILED = 0xE2003052;
		public const UInt32 PSC_STATUS_INITIALIZATION_FAILED = 0xE2003053;
		public const UInt32 PSC_STATUS_DISC_SYNC_LOCK_FAILED = 0xE2003054;
		public const UInt32 PSC_STATUS_INTERNAL_ERROR_SYNCRONIZATION = 0xE2003056;
		public const UInt32 PSC_STATUS_INTERNAL_ERROR_ACTIVATION = 0xE2003057;
		public const UInt32 PSC_STATUS_DISC_UNABLE_TO_COPY_LABEL = 0xE2003058;
		public const UInt32 PSC_STATUS_UNABLE_TO_COPY_INFO_BUFFER = 0xE200F001;
		public const UInt32 PSC_STATUS_UNABLE_TO_GET_ERROR_BUFFER = 0xE200000A;
		public const UInt32 PSC_STATUS_INVALID_OPERATION = 0xE200000B;
		public const UInt32 PSC_STATUS_ERROR_IN_PSAPI = 0xE200000C;

		// Intialization fatal codes (with messages)
		public const UInt32 PSC_FATAL_UNSUPPORTED_PROCESSOR = 0xE1003001;
		public const UInt32 PSC_FATAL_UNSUPPORTED_OPERATING_SYSTEM = 0xE1003002;
		public const UInt32 PSC_FATAL_MULTIPLE_INSTANCES_CONFLICT = 0xE1003004;
		public const UInt32 PSC_FATAL_INVALID_TIME_SETTINGS = 0xE1003055;
		public const UInt32 PSC_FATAL_APPLICATIONS_RUNNING = 0xE100309A;
		public const UInt32 PSC_FATAL_ACTIVATOR_RUNNING = 0xE100309B;
		public const UInt32 PSC_FATAL_FILE_SYSTEM_INITIALIZATION_FAILED = 0xE1003022;
		public const UInt32 PSC_FATAL_PC_EMULATOR_DETECTED = 0xE1003025;
		public const UInt32 PSC_FATAL_REMOTE_SESSION_DETECTED = 0xE1003030;
		public const UInt32 PSC_FATAL_MODULE_INFECTED = 0xE1003014;
		public const UInt32 PSC_FATAL_DEBUGGER_DETECTED = 0xE1003007;

		// Miscellaneous error codes (with messages)
		public const UInt32 PSC_ERROR_KEY_MISTYPED = 0xA1003037;

		// Communication error codes (with messages)
		public const UInt32 PSC_ERROR_SOCKET_IO_FAILED = 0xA1003287;
		public const UInt32 PSC_ERROR_SOCKET_ERROR = 0xA1003281;
		public const UInt32 PSC_ERROR_UNABLE_TO_CONNECT = 0xA1003286;
		public const UInt32 PSC_ERROR_INVALID_RESPONSE = 0xA100328E;
		public const UInt32 PSC_ERROR_PROXY_AUTHENTICATION_FAILED = 0xA1003292;

		// Communication error codes (with messages)
		public const UInt32 PSC_STATUS_COMMUNICATOR_SOCKET_IO_FAILED = 0xE2003287;
		public const UInt32 PSC_STATUS_COMMUNICATOR_SOCKET_ERROR = 0xE2003281;
		public const UInt32 PSC_STATUS_COMMUNICATOR_UNABLE_TO_CONNECT = 0xE2003286;
		public const UInt32 PSC_STATUS_COMMUNICATOR_INVALID_RESPONSE = 0xE200328E;

		// Disc error codes (common)
		public const UInt32 PSC_ERROR_DISC_UNABLE_TO_READ_VALID_KEY_FROM_DISC = 0xA100313D;
		public const UInt32 PSC_ERROR_DISC_NOT_FOUND = 0xA1003102;
		public const UInt32 PSC_ERROR_DISC_MORE_THEN_ONE_PRODUCT_DISC = 0xA100313A;
		public const UInt32 PSC_ERROR_DISC_IO_ERROR = 0xA1003121;
		public const UInt32 PSC_STATUS_DISC_INSERT_DISC_INTO_ANOTHER_DRIVE = 0xE2003120;

		// Disc error codes (check failed)
		public const UInt32 PSC_ERROR_DISC_CHECK_CANCELLED = 0xA1003125;
		public const UInt32 PSC_ERROR_DISC_CHECK_FAILED = 0xA1003126;
		public const UInt32 PSC_ERROR_DISC_CHECK_FAILED_FOR_INTERNAL_KEY = 0xA1003130;
		public const UInt32 PSC_ERROR_DISC_COPY_DETECTED = 0xA1003142;
		public const UInt32 PSC_ERROR_DISC_EMULATOR_DETECTED = 0xA1003141;
		public const UInt32 PSC_ERROR_DISC_FILTER_DETECTED = PSC_ERROR_DISC_EMULATOR_DETECTED;
		public const UInt32 PSC_ERROR_DISC_SYNC_DRIVER_PATCHED = PSC_ERROR_DISC_EMULATOR_DETECTED;
		public const UInt32 PSC_ERROR_DISC_SYNC_DRIVER_CALLBACKS_DEAD = PSC_ERROR_DISC_EMULATOR_DETECTED;
		public const UInt32 PSC_ERROR_DISC_SYNC_DRIVER_MODULES_INFO_INCONSISTENT = PSC_ERROR_DISC_EMULATOR_DETECTED;
#if PS_READ_KEY_FROM_DISC
public const UInt32 PSC_ERROR_DISC_DVD_WRITABLE_MEDIA = PSC_ERROR_DISC_COPY_DETECTED;
public const UInt32 PSC_ERROR_DISC_CD_WRITABLE_MEDIA_OR_INVALID_ATIP = PSC_ERROR_DISC_COPY_DETECTED;
public const UInt32 PSC_ERROR_DISC_DATA_CHECK_FAILED = PSC_ERROR_DISC_CHECK_FAILED_FOR_INTERNAL_KEY;
#else
#if PS_DISC_CHECK_WRITABLE_MEDIA_ONLY
public const UInt32 PSC_ERROR_DISC_DVD_WRITABLE_MEDIA = PSC_ERROR_DISC_COPY_DETECTED;
public const UInt32 PSC_ERROR_DISC_CD_WRITABLE_MEDIA_OR_INVALID_ATIP = PSC_ERROR_DISC_COPY_DETECTED;
#else
		public const UInt32 PSC_ERROR_DISC_DVD_WRITABLE_MEDIA = PSC_ERROR_DISC_COPY_DETECTED;
		public const UInt32 PSC_ERROR_DISC_CD_WRITABLE_MEDIA_OR_INVALID_ATIP = PSC_ERROR_DISC_COPY_DETECTED;
#endif
		public const UInt32 PSC_ERROR_DISC_DATA_CHECK_FAILED = PSC_ERROR_DISC_CHECK_FAILED;
#endif

		// Disc error codes (license expiration and deactivation)
		public const UInt32 PSC_ERROR_LICENSE_DEACTIVATED_FOR_DISC_KEY = 0xA100322C;
		public const UInt32 PSC_FATAL_TIME_CHECK_FAILED_FOR_DISC_KEY = 0xE100312A;
		public const UInt32 PSC_ERROR_CLOCK_SET_BACKWARD_FOR_DISC_KEY = 0xA100312C;
		public const UInt32 PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_DISC_KEY = 0xA1003145;
		public const UInt32 PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_DISC_KEY = 0xA1003128;
		public const UInt32 PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_DISC_KEY = 0xA1003146;

		// Activation error codes (common)
		public const UInt32 PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_ACTIVATION_KEY = 0xA1003206;
		public const UInt32 PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_ACTIVATION_KEY = 0xA1003204;
		public const UInt32 PSC_ERROR_REGISTERED_PROFILE_NOT_FOUND_FOR_ACTIVATION_KEY = 0xA1003207;
		public const UInt32 PSC_FATAL_INVALID_RECEIVED_KEY = 0xE1003290;

		// Activation error codes 
		public const UInt32 PSC_ERROR_LICENSE_DEACTIVATED_FOR_ACTIVATION_KEY = 0xA1003228;
		public const UInt32 PSC_ERROR_CLOCK_SET_BACKWARD_FOR_ACTIVATION_KEY = 0xA100320B;
		public const UInt32 PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_ACTIVATION_KEY = 0xA1003223;
		public const UInt32 PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_ACTIVATION_KEY = 0xA100320F;
		public const UInt32 PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_ACTIVATION_KEY = 0xA1003219;
		public const UInt32 PSC_FATAL_TIME_CHECK_FAILED_FOR_ACTIVATION_KEY = 0xE1003205;

		// Deactivation error codes
		public const UInt32 PSC_ERROR_LICENSE_NOT_FOUND_FOR_DEACTIVATION = 0xA100322D;
		public const UInt32 PSC_ERROR_HARDWARE_CHECK_FAILED_WHILE_DEACTIVATION = 0xA1003231;
		public const UInt32 PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_WHILE_DEACTIVATION = 0xA1003232;
		public const UInt32 PSC_ERROR_LICENSE_EXPIRED_WHILE_DEACTIVATION = 0xA1003233;
		public const UInt32 PSC_FATAL_TIME_CHECK_FAILED_WHILE_DEACTIVATION = 0xA1003234;
		public const UInt32 PSC_ERROR_CLOCK_SET_BACKWARD_WHILE_DEACTIVATION = 0xA1003235;
		public const UInt32 PSC_ERROR_LICENSE_DEACTIVATED_WHILE_DEACTIVATION = 0xA1003236;
		public const UInt32 PSC_ERROR_DEACTIVATIONS_EXHAUSTED = 0xE100305C;

		// Trial error codes
		public const UInt32 PSC_ERROR_INTEGRITY_CHECK_FAILED_FOR_TRIAL_INFO = 0xA1003213;
		public const UInt32 PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY = 0xA1003212;
		public const UInt32 PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY = 0xA1003210;
		public const UInt32 PSC_FATAL_UNABLE_TO_REMOVE_TRIAL_INFO = 0xE1003217;

		// Trial error codes (license expiration and deactivation)
		public const UInt32 PSC_STATUS_LICENSE_DEACTIVATED_FOR_TRIAL_ACTIVATION_KEY = 0xE2003229;
		public const UInt32 PSC_ERROR_CLOCK_SET_BACKWARD_FOR_TRIAL_ACTIVATION_KEY = 0xA1003214;
		public const UInt32 PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY = 0xA1003224;
		public const UInt32 PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY = 0xA1003215;
		public const UInt32 PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY = 0xA1003220;
		public const UInt32 PSC_FATAL_TIME_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY = 0xE1003211;

		// Rescue error codes
		public const UInt32 PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_RESCUE_KEY = 0xA100312E;
		public const UInt32 PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_RESCUE_KEY = 0xA1003127;
		public const UInt32 PSC_ERROR_LICENSE_OR_REGISTERED_PROFILE_NOT_FOUND_FOR_RESCUE_KEY = 0xA1003123;

		// Rescue error codes (license expiration and deactivation)
		public const UInt32 PSC_STATUS_LICENSE_DEACTIVATED_FOR_RESCUE_KEY = 0xE200322A;
		public const UInt32 PSC_ERROR_CLOCK_SET_BACKWARD_FOR_RESCUE_KEY = 0xA100312D;
		public const UInt32 PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_RESCUE_KEY = 0xA1003225;
		public const UInt32 PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_RESCUE_KEY = 0xA1003129;
		public const UInt32 PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_RESCUE_KEY = 0xA1003221;
		public const UInt32 PSC_FATAL_TIME_CHECK_FAILED_FOR_RESCUE_KEY = 0xE100312B;

		// Auto activation error codes (without messages)
		public const UInt32 PSC_STATUS_AUTO_ACTIVATION_CANCELLED = 0xE200001F;
		public const UInt32 PSC_STATUS_AUTO_ACTIVATION_DENIED = 0xE2000020;
		public const UInt32 PSC_STATUS_AUTO_ACTIVATION_FAILED = 0xE2000021;

		// Auto activation error codes
		public const UInt32 PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY = 0xA1003136;
		public const UInt32 PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY = 0xA1003133;
		public const UInt32 PSC_ERROR_REGISTERED_PROFILE_NOT_FOUND_FOR_AUTO_ACTIVATION_KEY = 0xA1003137;

		// Auto activation error codes (license expiration and deactivation)
		public const UInt32 PSC_STATUS_LICENSE_DEACTIVATED_FOR_AUTO_ACTIVATION_KEY = 0xE200322B;
		public const UInt32 PSC_ERROR_CLOCK_SET_BACKWARD_FOR_AUTO_ACTIVATION_KEY = 0xA1003138;
		public const UInt32 PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY = 0xA1003226;
		public const UInt32 PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY = 0xA1003134;
		public const UInt32 PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY = 0xA1003222;
		public const UInt32 PSC_FATAL_TIME_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY = 0xE1003135;

		// Server binding status codes (without messages)
		public const UInt32 PSC_STATUS_SRVBND_SERVER_SESSION_LOCKED = 0xE2000017;
		public const UInt32 PSC_STATUS_SRVBND_SERVER_INVALID_SESSION_INTEGRITY = 0xE2000018;
		public const UInt32 PSC_STATUS_SRVBND_INVALID_REQUEST = 0xE2000019;
		public const UInt32 PSC_STATUS_SRVBND_INVALID_REQUEST_NUMBER = 0xE200001A;
		public const UInt32 PSC_STATUS_SRVBND_ERROR_WITH_MESSAGE_RETRY_IS_POSSIBLE = 0xE200001B;
		public const UInt32 PSC_STATUS_SRVBND_ERROR_WITH_MESSAGE_RETRY_IS_NOT_POSSIBLE = 0xE200001C;
		public const UInt32 PSC_STATUS_SRVBND_SERVER_SESSION_NOT_FOUND = 0xE200001E;

		// Server binding error codes (with messages)
		public const UInt32 PSC_ERROR_SRVBND_TOO_MANY_CONNECTIONS = 0xA1003300;
		public const UInt32 PSC_ERROR_SRVBND_UNABLE_TO_LOAD_PROTECTION_LIBRARY_ON_SERVER = 0xA1003301;
		public const UInt32 PSC_ERROR_SRVBND_UNABLE_TO_CONNECT = 0xA1003302;
		public const UInt32 PSC_ERROR_SRVBND_IO_ERROR = 0xA1003303;
		public const UInt32 PSC_ERROR_SRVBND_SESSION_NOT_APPROVED = 0xA1003304;
		public const UInt32 PSC_ERROR_SRVBND_INVALID_RESPONSE = 0xA100330A;

		//
		//	II. Process exit codes
		//

		//
		//	Exit codes of protected application
		//

		// License has expired (this code is returned if the option for termination
		// of application after expiration of the license is enabled)
		public const UInt32 PSC_EXIT_CODE_LICENSE_EXPIRED = 0xC0000071;

		// Connection to binding server has been lost
		public const UInt32 PSC_EXIT_CODE_SRVBND_SESSION_LOST = 0xC000020C;

		// Unknown error in protection module
		public const UInt32 PSC_EXIT_CODE_UNKNOWN_ERROR = 0xC0000001;

		// Process has been terminated by protect.exe (for rebooting during
		// installation of drivers)
		public const UInt32 PSC_EXIT_CODE_EXTERNAL_TERMINATION = 0xC000020C;

		//
		//	Exit codes of protect.exe
		//		The module protect.exe returns the value of PSC_STATUS_XXX that
		//		corresponds to the error (PSC_STATUS_SUCCESS = 0 on success) or
		//		PSC_EXIT_CODE_UNKNOWN_ERROR on unknown error. In special cases (see
		//		below), protect.exe returns other exit codes.
		//

		//
		//	Exit codes of protect.exe (in driver installer mode) for following commands:
		//		protect.exe /drv:install /nogui [/forcereboot]
		//		protect.exe /drv:uninstall /nogui [/forcereboot]
		//		protect.exe /drv:remove /nogui [/forcereboot]
		//

		// Operation successfully completed
		public const UInt32 PSC_EXIT_CODE_DRIVER_SUCCESS = 0;

		// Operation failed: unknown error occured
		public const UInt32 PSC_EXIT_CODE_DRIVER_ERROR = 1;

		// Reboot required for completing of operation
		public const UInt32 PSC_EXIT_CODE_DRIVER_NEED_REBOOT = 2;

		// Operation failed: administrator privilegies required
		public const UInt32 PSC_EXIT_CODE_DRIVER_NEED_ADMINISTRATOR = 3;

		// Operation failed: Conflict with another application (close all applications)
		public const UInt32 PSC_EXIT_CODE_USAGE_CONFLICT = 4;

		// Operation failed: debugger detected
		public const UInt32 PSC_EXIT_CODE_DRIVER_DEBUGGER_DETECTED = 5;

		// Operation failed: incompatible OS detected
		public const UInt32 PSC_EXIT_CODE_DRIVER_INCOMPATIBLE_OS = 6;

		// Operation failed: OS is running in safe mode
		public const UInt32 PSC_EXIT_CODE_DRIVER_SAFE_MODE = 7;

		// Operation failed: cancelled by user
		public const UInt32 PSC_EXIT_CODE_DRIVER_CANCELLED = 9;

		//
		//	Exit codes of protect.exe (in driver installer mode) for following command:
		//		protect.exe /drv:check /nogui
		//

		// Drivers are not installed
		public const UInt32 PSC_EXIT_CODE_DRIVERS_NOT_INSTALLED = 0;

		// Drivers are installed
		public const UInt32 PSC_EXIT_CODE_DRIVER_INSTALLED = 1;

		//
		//	III. Miscellaneous public constants
		//

		// Maximum key length
		public const UInt32 KEY_MAX_SYMBOLIC_LENGTH = 320;

		// Maximum number of information codes returned by PSC_GetErrorInformation
		public const UInt32 ERR_MAXIMUM_NUMBER_OF_INFORMATION_CODES = 64;

		// Initialization types (argument of PSC_StartInitialization)
		public const UInt32 PS_INITIALIZATION_TYPE_SIMPLE = 0;
		public const UInt32 PS_INITIALIZATION_TYPE_DISC = 1;
		public const UInt32 PS_INITIALIZATION_TYPE_HARDWARE = 2;
		public const UInt32 PS_INITIALIZATION_TYPE_EXTERNAL = 4;
		public const UInt32 PS_INITIALIZATION_TYPE_SERVER = 8;
		public const UInt32 PS_INITIALIZATION_TYPE_DISC_WITH_BACKUP = 32;
		public const UInt32 PS_INITIALIZATION_TYPE_DISC_WITH_BACKUP_DISC_MODE = 0x10000000;
		public const UInt32 PS_INITIALIZATION_TYPE_DISC_WITH_BACKUP_BACKUP_MODE = 0x20000000;
		public const UInt32 PS_INITIALIZATION_TYPE_UNDEFINED = 0xFFFFFFFF;

		// EIM mode
		public const UInt32 PS_EIM_MODE_DISABLED = 0;
		public const UInt32 PS_EIM_MODE_LOADER = 1;
		public const UInt32 PS_EIM_MODE_APPLICATION = 2;

		// Period for periodical license check
		public const UInt32 PS_PERIODICAL_LICENSE_CHECK_INTERVAL_MS = 30000;

		//
		//	IV. EIM migration
		//

		//
		// Correspondence between obsolete EIM_SFA_XXX functions and PSC_XXX functions
		//
		//		Obsolete function										New function
		//
		//	SFA_EIM_Initialize										PSC_StartInitialization
		//	SFA_EIM_TryTrialLicenseCreateIfAbsent					PSC_HardwareTryTrialLicense
		//	SFA_EIM_TryNormalLicense								PSC_HardwareTryNormalLicense
		//	SFA_EIM_CreateOrLoadNormalLicenseAndGetHardwareCode		PSC_HardwareCreateOrLoadNormalLicenseAndGetHardwareCode
		//	SFA_EIM_ActivateAndStoreNormalLicense					PSC_HardwareActivateAndStoreNormalLicense
		//	SFA_LoadString											PSC_LoadString
		//

		//
		// Correspondence between obsolete EIM_STATUS_XXX codes and PSC_STATUS_XXX codes:
		//
		//		Obsolete code											New code
		//
		//	EIM_STATUS_SUCCESS										PSC_STATUS_SUCCESS
		//	EIM_STATUS_UNEXPECTED_ERROR								any unexpected code
		//	EIM_STATUS_REGISTRY_ACCESS_ERROR						PSC_FATAL_REGISTRY_ACCESS_ERROR
		//	EIM_STATUS_HARDWARE_ACCESS_ERROR						PSC_FATAL_HARDWARE_ACCESS_ERROR
		//	EIM_STATUS_INVALID_ARGUMENT								PSC_STATUS_INVALID_PARAMETER
		//	EIM_STATUS_BUFFER_TOO_SMALL								PSC_STATUS_BUFFER_TOO_SMALL
		//	EIM_STATUS_HARDWARE_CHECK_FAILED						PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_XXX_KEY
		//	EIM_STATUS_INVALID_ACTIVATION_KEY						PSC_STATUS_INVALID_ACTIVATION_KEY
		//	EIM_STATUS_LICENSE_NOT_FOUND							PSC_STATUS_LICENSE_NOT_FOUND
		//	EIM_STATUS_INVALID_TIME									PSC_FATAL_TIME_CHECK_FAILED_FOR_XXX_KEY
		//	EIM_STATUS_INVALID_LAST_SUCCESS_TIME					PSC_ERROR_CLOCK_SET_BACKWARD_FOR_XXX_KEY
		//	EIM_STATUS_LIFE_TIME_EXCEEDED							PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_XXX_KEY
		//	EIM_STATUS_NUMBER_OF_RUNS_EXCEEDED						PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_XXX_KEY
		//	EIM_STATUS_EXECUTION_TIME_EXCEEDED						PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_XXX_KEY
		//	EIM_STATUS_LICENSE_DEACTIVATED							PSC_ERROR_LICENSE_DEACTIVATED_FOR_XXX_KEY
		//

		//
		//	V. Names of global events
		//

		//
		//	Global events are used to indicate the starting mode of application. Event names
		//	are public constructed using prefix and hash of project GUID:
		//
		//		name = PS_EVENT_NAME_PREFIX_XXX + PS_PROJECT_GUID_HASH_OF_STRING_W
		//		name = L"Global\\" + GPS_EVENT_NAME_PREFIX_XXX + PS_PROJECT_GUID_HASH_OF_STRING_W
		//

		// If this event is created before starting of rotected application, the
		// application will start in "No GUI Mode" i.e. no GUI window will be
		// displayed. If the license is valid, the application will launch, else
		// the error message will be written into event log (see also description
		// of /eventlog:register). This event can be either global or local.
		public const String PS_EVENT_NAME_PREFIX_GUI_NOT_AVAILABLE_MODE = "{89E323B4-B99D-4D0A-8980-887714794544}";

		// It this event is not created, the application in EIM mode will not
		// start if it is only trial license present in registry. This event
		// can be either global or local.
		public const String PS_EVENT_NAME_PREFIX_EIM_APPLICATION_STARTED_USING_LOADER = "{3AF31710-DE40-4ea3-90CD-24142E2F05D4}";

		// Local event to mark deactivation mode of activator
		public const String PS_EVENT_NAME_PREFIX_DEACTIVATION = "{E895772A-B8CB-4ebf-9B89-EA4C6F8064BB}";
	}
}
