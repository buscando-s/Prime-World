//
//	PsaApi.h
//
//	File description:
//		Header file for public API functions. These functions can be used in
//      initialization module as well as in protected application.
//

// Include this file only once
#pragma once

// Additional headers
#ifndef PS_CONFIG_H_INCLUDED_7D7370D6_8681_4908_8C5F_D1152CF38653
#define PS_CONFIG_H_INCLUDED_7D7370D6_8681_4908_8C5F_D1152CF38653
#include "PsConfig.h"
#endif
#ifndef PS_CONSTANTS_H_INCLUDED_7990EBEC_1968_44FF_AF44_6800920821F1
#define PS_CONSTANTS_H_INCLUDED_7990EBEC_1968_44FF_AF44_6800920821F1
#include "PsConstants.h"
#endif

//
//	Common functions
//

//
//	Description:
//		Dummy reference (simply returns the control). Linker can exclude
//		protect.dll from import table if no functions are used. So, this
//		function can be inserted into any part of application code to
//		prevent this.
//
void __stdcall PSA_DummyFunction();

//
//	Description:
//		Uninitialize protection core resources before unloading of protect.dll
//		or before exit.
//		The protection core can create threads for periodical checking of
//		license expiration etc. If protect.dll will be unloaded using
//		FreeLibrary( someProtectedDllHandle ) these threads will be	stopped
//		by operating system and resources that are allocated in these threads
//		will not be freed. It can lead to resource leaks if	the protected .DLL
//		is loaded and unloaded many times.
//		If you protect only .EXE files or there are no multiple
//		loading/unloading of protected .DLL files the call to this function
//		is not mandatory.
//
//	Output:
//		Return value - PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_Uninitialize();

#ifdef PS_USE_LICENSES

//
//	Description:
//		Get registry path and base handle for license.
//
//	Input:
//		pathBuffer					- buffer for path
//		pathBufferSizeInWideChars	- buffer size
//		registryBaseHandle			- buffer for base handle
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//		*pathBuffer					- path (Unicode zero-terminated string)
//		*pathBufferSizeInWideChars	- used buffer size (or required buffer
//			size is return value is PSC_STATUS_BUFFER_TOO_SMALL)
//		*registryBaseHandle			- buffer for base handle
//
unsigned __int32 __stdcall PSA_GetLicenseStoragePath(
	wchar_t *pathBuffer,
	size_t *pathBufferSizeInWideChars,
	HANDLE *registryBaseHandle );

// License version (see PSA_GetLicenseInformation)
#define LIC_VERSION_UNDEFINED								0xFFFFFFFF
#define LIC_VERSION_0_DISC									0
#define LIC_VERSION_1_HARDWARE								1

// License types (see PSA_GetLicenseInformation)
#define LIC_TYPE_UNDEFINED									0xFFFFFFFF
#define LIC_TYPE_HARDWARE									0
#define LIC_TYPE_HARDWARE_TRIAL								1
#define LIC_TYPE_HARDWARE_RESCUE							2
#define LIC_TYPE_HARDWARE_AUTOGENERATED_AFTER_DISC_CHECK	3
#define LIC_TYPE_DISC										4

//
//	Description:
//		Get special information for current license.
//
//	Input:
//		version			- buffer for license version
//		type			- buffer for license type
//		nonCommercial	- buffer for non-commercial flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*version		- license version
//		*type			- license type
//		*nonCommercial	- non-commercial flag
//
//	Registry keys for debugging:
//		"LicenseVersion", "LicenseType", "IsNonCommercialLicense" of type
//		REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetLicenseInformation(
	unsigned __int32 *version,
	unsigned __int32 *type,
	bool *nonCommercial );

#endif

//
//	Limitation of functionality
//

#ifdef PS_USE_LICENSES

// Codes of independent features that can be granted by license
#define PSA_GrantedFeature0			0x00000001
#define PSA_GrantedFeature1			0x00000002
#define PSA_GrantedFeature2			0x00000004
#define PSA_GrantedFeature3			0x00000008
#define PSA_GrantedFeature4			0x00000010
#define PSA_GrantedFeature5			0x00000020
#define PSA_GrantedFeature6			0x00000040
#define PSA_GrantedFeature7			0x00000080
#define PSA_GrantedFeature8			0x00000100
#define PSA_GrantedFeature9			0x00000200
#define PSA_GrantedFeature10		0x00000400
#define PSA_GrantedFeature11		0x00000800
#define PSA_GrantedFeature12		0x00001000
#define PSA_GrantedFeature13		0x00002000
#define PSA_GrantedFeature14		0x00004000
#define PSA_GrantedFeature15		0x00008000
#define PSA_GrantedFeature16		0x00010000
#define PSA_GrantedFeature17		0x00020000
#define PSA_GrantedFeature18		0x00040000
#define PSA_GrantedFeature19		0x00080000
#define PSA_GrantedFeature20		0x00100000
#define PSA_GrantedFeature21		0x00200000
#define PSA_GrantedFeature22		0x00400000
#define PSA_GrantedFeature23		0x00800000
#define PSA_GrantedFeature24		0x01000000
#define PSA_GrantedFeature25		0x02000000
#define PSA_GrantedFeature26		0x04000000
#define PSA_GrantedFeature27		0x08000000
#define PSA_GrantedFeature28		0x10000000
#define PSA_GrantedFeature29		0x20000000
#define PSA_GrantedFeature30		0x40000000
#define PSA_GrantedFeature31		0x80000000

//
//	Description:
//		Get a set of features granted by license (bit mask).
//		For example, this function can return the value	*features = 9,
//		i.e. ( PSA_GrantedFeature0 | PSA_GrantedFeature3 ).
//		This function returns *features = 0 for demo mode (if demo mode has
//		been enabled).
//
//	Input:
//		features		- buffer for feature set
//
//	Output:
//		*features		- feature set
//		Return value	- PSC_STATUS_SUCCESS or error code
//
//	Registry keys for debugging:
//		"FeatureSetGrantedByLicense" of type REG_DWORD (initialized at
//		loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetFeaturesGrantedByLicense(
	unsigned __int32 *features );

//
//	Description:
//		Disable features granted by license for limitation of application
//		functionality "on the fly" e.g. after expiration of license (only
//		enabled features will be disabled, so, 0xFFFFFFFF is valid argument
//		for disabling of all features).
//
//	Input:
//		features		- buffer for feature set mask
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_DisableFeaturesGrantedByLicense(
	unsigned __int32 features );

//
//	Description:
//		Check rights granted by license and display error dialog on error.
//		This function works only in SDK mode. In normal protected application
//		is does nothing.
//
//	Input:
//		features		- features mask to check (the check succeed if
//			at least one bit from the mask is set in current license)
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if the check succeeds or fails
//			or error code on internal error
//
unsigned __int32 __stdcall PSA_CheckFeaturesGrantedByLicense(
	unsigned __int32 features );

#endif

//
//	Program start mode
//

#ifdef PS_USE_LICENSES

//
//	Description:
//		Check if the application is running in demo mode.
//
//	Input:
//		isDemoMode		- buffer for demo mode flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*isDemoMode		- demo mode flag
//
//	Registry keys for debugging:
//		"IsDemoMode" of type REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_IsDemoMode(
	bool *isDemoMode );

//
//	Description:
//		Check if the application is running in trial mode.
//
//	Input:
//		isTrialMode		- buffer for trial mode flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*isTrialMode	- trial mode flag
//
//	Registry keys for debugging:
//		"IsTrialMode" of type REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_IsTrialMode(
	bool *isTrialMode );

#endif

//
//	Expiration parameters of license
//

#ifdef PS_USE_LICENSES

//
//	Description:
//		Get license creation time
//
//	Input:
//		licenseCreationDateTime		- buffer for time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseCreationDateTime	- license creation time in 100 ns intervals
//
//	Registry keys for debugging:
//		"LicenseCreationTime" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetLicenseCreationDateTime(
	unsigned __int64 *licenseCreationDateTime );

//
//	Description:
//		Check if the license is already expired.
//
//	Input:
//		isLicenseExpired	- buffer for license expired flag
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*isLicenseExpired	- license expired flag
//		updateRunTimeData	- flag for updating of license usage history
//
//	Registry keys for debugging:
//		"IsLicenseExpired" of type REG_DWORD (reinitialized at each call).
//
unsigned __int32 __stdcall PSA_IsLicenseExpired(
	bool *isLicenseExpired, bool updateRunTimeData );

//
//	Description:
//		Get the time before expiration of license.
//
//	Input:
//		timeToLicenseExpiration		- buffer for time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*timeToLicenseExpiration	- time before expiration of license in
//			100 ns intervals (0 - license expired, ~0ui64 - undefined or
//			infinite)
//
//	Registry keys for debugging:
//		"TimeToLicenseExpiration" of type REG_BINARY and length 8 bytes
//		(reinitialized at each call).
//
unsigned __int32 __stdcall PSA_GetTimeToLicenseExpiration(
	unsigned __int64 *timeToLicenseExpiration );

//
//	Description:
//		Get date and time of license expiration.
//
//	Input:
//		licenseExpirationDateTime	- buffer for date and time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseExpirationDateTime	- date and time of license expiration in
//			file time format, i.e. number of 100 ns intervals elapsed since
//			January 1, 1601 (~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"LicenseExpirationDateTime" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetLicenseExpirationDateTime(
	unsigned __int64 *licenseExpirationDateTime );

//
//	Description:
//		Get life time limit of license (i.e. time before expiration of license
//		from the moment of license creation, as assigned by e.g. activation
//		key).
//
//	Input:
//		licenseLifeTimeLimit	- buffer for life time limit
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*licenseLifeTimeLimit	- life time limit in 100 ns intervals
//			(~0ui64 - undefined or infinite).
//
//	Registry keys for debugging:
//		"LicenseLifeTimeLimit" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetLicenseLifeTimeLimit(
	unsigned __int64 *licenseLifeTimeLimit );

//
//	Description:
//		Get remaining number of runs.
//
//	Input:
//		remainingNumberOfRuns	- buffer for remaining number of runs
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*remainingNumberOfRuns	- remaining number of runs (~0ui32 - undefined
//			or infinite)
//
//	Registry keys for debugging:
//		"RemainingNumberOfRuns" of type REG_DWORD (initialized at loading of
//		protect.dll).
//
unsigned __int32 __stdcall PSA_GetRemainingNumberOfRuns(
	unsigned __int32 *remainingNumberOfRuns );

//
//	Description:
//		Get limit for number of runs (i.e. total allowed number of runs, as
//		assigned by e.g. activation key).
//
//	Input:
//		remainingNumberOfRuns	- buffer for limit of number of runs
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*remainingNumberOfRuns	- limit of number of runs (~0ui32 - undefined
//			or infinite)
//
//	Registry keys for debugging:
//		"LicenseNumberOfRunsLimit" of type REG_DWORD (initialized at loading of
//		protect.dll).
//
unsigned __int32 __stdcall PSA_GetLicenseNumberOfRunsLimit(
	unsigned __int32 *licenseNumberOfRunsLimit );

//
//	Description:
//		Get remaining execution time of application, calculated in the current
//		moment.
//
//	Input:
//		remainingExecutionTime	- buffer for remaining execution time
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*remainingExecutionTime	- remaining execution time in 100 ns intervals
//			(0 - license expired, ~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"RemainingExecutionTime" of type REG_BINARY and length 8 bytes
//		(reinitialized at each call).
//
unsigned __int32 __stdcall PSA_GetRemainingExecutionTime(
	unsigned __int64 *remainingExecutionTime );

//
//	Description:
//		Get remaining execution time of application, calculated in the moment
//		of start of application.
//
//	Input:
//		remainingExecutinTimeAtStart	- buffer for remaining execution time
//
//	Output:
//		Return value					- PSC_STATUS_SUCCESS or error code
//		*remainingExecutinTimeAtStart	- remaining execution time in 100 ns
//			intervals (0 - license expired, ~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"RemainingExecutionTimeAtStart" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetRemainingExecutionTimeAtStart(
	unsigned __int64 *remainingExecutinTimeAtStart );

//
//	Description:
//		Get limit for execution time of application(i.e. total allowed
//		execution time assigned by e.g. activation key).
//
//	Input:
//		licenseExecutionTimeLimit	- buffer for limit of execution time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseExecutionTimeLimit	- limit of execution time in 100 ns
//			intervals (~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"LicenseExecutionTimeLimit" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetLicenseExecutionTimeLimit(
	unsigned __int64 *licenseExecutionTimeLimit );

#endif

//
//	Miscellaneous data in the key
//

#ifdef PS_USE_LICENSES

//
//	Description:
//		Get user-defined field.
//
//	Input:
//		userDefinedField	- buffer for user-defined field
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*userDefinedField	- user-defined field (0xFFFF if undefined)
//
//	Registry keys for debugging:
//		"UserDefinedField16Bits" of type REG_DWORD (initialized at loading
//		of protect.dll).
//
unsigned __int32 __stdcall PSA_GetUserDefinedField16Bits(
	unsigned __int16 *userDefinedField );

//
//	Description:
//		Get number of connections.
//
//	Input:
//		numberOfConnections		- buffer for user-defined field
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*numberOfConnections	- number of connections (~0ui32 if undefined)
//
//	Registry keys for debugging:
//		"NumberOfConnections" of type REG_DWORD (initialized at loading
//		of protect.dll).
//
unsigned __int32 __stdcall PSA_GetNumberOfConnections(
	unsigned __int32 *numberOfConnections );

#endif

//
//	Specific functions for disc binding
//

#ifdef BINDING_DISC

//	Description:
//		Get the label of disc with that the check was passed.
//
//	Input:
//		labelBuffer					- buffer for disc label
//		labelBufferSizeInWideChars	- buffer size
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//		*labelBuffer				- label (Unicode zero-terminated string)
//		*labelBufferSizeInWideChars	- used buffer size (or required buffer
//			size is return value is PSC_STATUS_BUFFER_TOO_SMALL)
//
//	Registry keys for debugging:
//		"DiscLabel" of type REG_SZ (initialized at loading of protect.dll).
//
unsigned __int32 __stdcall PSA_GetDiscLabel(
	wchar_t *labelBuffer,
	size_t *labelBufferSizeInWideChars );

#endif

// 
//	Specific functions for external binding
// 

#ifdef PS_EXTERNAL_BASED_INITIALIZATION_SUPPORTED

//
//	Description:
//		Set external binding check success flag. By default flag 
//		is cleared.
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_ExternalBindingCheckSetSucceedFlag();

//
//	Description:
//		Clear external binding check success flag. By default flag 
//		is cleared.
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_ExternalBindingCheckSetFailedFlag();

#endif

//
//	Crypted traffic API
//

#ifdef PS_SUPPORT_CRYPTED_TRAFFIC

// Public RSA key
struct PSA_CryptedTrafficKey
{
	size_t KeySizeInBytes;			// Size of RSA key (current implementation
									// support only 128-byte or 256-byte keys)
	unsigned char *Modulus;					// Little-endian, size is KeySizeInBytes
	unsigned char *Exponent;					// Public exponent, little-endian, size is
									// KeySizeInBytes
};

//
//  Description:
//		Open strem of crypted traffic. The function creates initialization
//		block that should be sent to the remote server as first portion of
//		data.
//
//  Input:
//		randomSeed				    - random seed for session key (can be NULL)
//      randomSeedSize				- size of random seed in bytes (can be 0)
//		key							- public key structure to encrypt
//			initialization block
//		initializationBlock			- initialization block buffer
//		initializationBlockSize		- size of buffer
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//  	streamHandle				- stream handle
//		initializationBlockSize		- really used (or required, if return value
//			is PSC_STATUS_BUFFER_TOO_SMALL) size of initialization block
//
//	Note:
//		1.	If randomSeed is NULL or randomSeedSize is 0, the session key will be
//			initialized from timer.
//		2. 	Multiple streams are not supported in current implementation.
//
unsigned __int32 __stdcall PSA_CryptedTrafficOpen(
	const char *randomSeed,
	size_t randomSeedSize,
	PSA_CryptedTrafficKey *key,
	void** streamHandle,
	char *initializationBlock,
	size_t *initializationBlockSize);

//
//  Description:
//		Encrypt byte sequence.
//
//  Input:
//		streamHandle				- stream handle to encrypt bytes for
//      inputData					- input data buffer
//		outputData					- output data buffer
//		dataSize					- length of data in bytes
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_CryptedTrafficEncrypt(
	void *streamHandle,
	char *inputData,
	char *outputData,
	size_t dataSize);

//
//  Description:
//		Decrypt byte sequence.
//
//  Input:
//		streamHandle				- stream handle to decrypt bytes for
//      inputData					- input data buffer
//		outputData					- output data buffer
//		dataSize					- length of data in bytes
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_CryptedTrafficDecrypt(
	void *streamHandle,
	char *inputData,
	char *outputData,
	size_t dataSize);

//
//	Description:
//		Close stream of crypted traffic.
//
//  Input:
//		streamHandle				- stream handle to close
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_CryptedTrafficClose(
	void *streamHandle );

	
#endif

//
//	Additional checks
//

#ifdef PS_SUPPORT_FILE_CHECK_API

//  Description:
//		Return result of integrity checks of loaded files.
//
//  Input:
//		fileCheckResultOk 			- pointer to output variable set to true if
//			all of protected files loaded not corrupted set to false if hash
//			check for one or more files failed
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_GetCheckFilesHashResult( 
	bool *fileCheckResultOk );
#endif

#ifdef PS_SUPPORT_MEMORY_CHECK_API
//
//  Description:
//		Check read-only memory regions of protected modules, calculates hash
//		and compare to hash value stored in protection library
//
//  Input:
//		memCheckResultOk 			- pointer to output variable, set to true
//			if read only memory for all protected modules remains unchanged,
//			set to false if memory changed for one or more modules
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 __stdcall PSA_CheckProtectedModulesReadOnlyMem( 
	bool *memCheckResultOk );

#endif

#ifdef PS_SUPPORT_CERTIFICATE_CHECK

//
//	Description:
//		Generate certificate request packet for sending to the server.
//
//	Input:
//		requestBuffer	 	- buffer for request
//		requestBufferSize	- size of buffer in bytes
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//		*requestBuffer				- certificate request
//		*requestBufferSize			- used buffer size in bytes (or required
//			buffer size if return value is PSC_STATUS_BUFFER_TOO_SMALL)
//
unsigned __int32 __stdcall PSA_CertificateGenerateRequest(
	char *requestBuffer,
	size_t *requestBufferSize );

//
//	Description:
//		Validate certificate sent from server.
//
//	Input:
//		responseBuffer				- buffer with response from the server
//		responseBufferSize			- size of buffer in bytes
//
//	Output:
//		returnValue					- PSC_STATUS_SUCCESS of error code
//			(PSC_STATUS_INVALID_PARAMETER if arguments are invalid,
//			PSC_STATUS_CERTIFICATE_INVALID_FORMAT
//				if format of certificate is invalid or validation is failed,
//			PSC_STATUS_CERTIFICATE_NOT_VALID_YET
//				if validity period of certificate is in future,
//			PSC_STATUS_CERTIFICATE_NOT_VALID_ALREADY
//				if validity period of certificate is in past )
//
unsigned __int32 __stdcall PSA_CertificateValidate(
	char *responseBuffer,
	size_t responseBufferSize );

#endif

//
// File System API
//

#ifdef PS_FILE_SYSTEM_USER_MODE

// File position moving origin definition.
#define PSA_FS_SEEK_SET	0
#define PSA_FS_SEEK_CUR	1
#define PSA_FS_SEEK_END	2

//	Description:
//		Open a protected file.
//
//	Input:
//		fileName		- File name to open.
//		fileHandle		- Pointer to output handle of opened file if call succeed.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 __stdcall PSA_FsOpenFile(
	const wchar_t *fileName,
	void **fileHandle );

//	Description:
//		Close a protected file.
//
//	Input:
//		fileHandle		- File handle.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 __stdcall PSA_FsCloseFile(
	void *fileHandle );

//	Description:
//		Retrieve size of the specified protected file.
//
//	Input:
//		fileHandle		- File handle.
//		fileSize		- Pointer to a variable that receives the file size.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 __stdcall PSA_FsGetFileSize(
	void *fileHandle,
	__int64 *fileSize );

//	Description:
//		Move file position of the specified protected file.
//
//	Input:
//		fileHandle		- File handle.
//		origin			- Starting point for the file position move.
//						  This parameter can be one of the following values:
//						    PSA_FS_SEEK_SET - Starting point is the beginning of the file.
//						    PSA_FS_SEEK_CUR - Starting point is the current value of the file position.
//						    PSA_FS_SEEK_END - Starting point is the current end-of-file position.
//		offset			- Distance to move file position from the origin.
//		newOffset		- Pointer to a variable that receives new file position. Can be null.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 __stdcall PSA_FsSetFilePosition(
	void *fileHandle,
	unsigned __int32 origin,
	__int64 offset,
	__int64 *newOffset );

//	Description:
//		Read data from the specified protected file starting at the current file position.
//
//	Input:
//		fileHandle			- File handle.
//		buffer				- Pointer to a buffer that receives the data.
//		numberOfBytesToRead	- Maximum number of bytes to be read.
//		numberOfBytesRead	- Pointer to a variable that receives number of bytes actually read. Can be null.
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 __stdcall PSA_FsReadFile(
	void *fileHandle,
	void *buffer,
	size_t numberOfBytesToRead,
	size_t *numberOfBytesRead );

//	Description:
//		Verify digital signature of the specified real file.
//
//	Input:
//		fileName		- File name.
//		valid			- Pointer to a variable that receives result of verification.
//							Nonzero if digital signature of the file is valid, zero if invalid.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 __stdcall PSA_FsVerifyFileSignature(
	const wchar_t *fileName,
	int *valid );

#endif

// Protected classes

// Internal functions for protected class
unsigned int __stdcall PSA_PsUInt1ConvertEX( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1AssignXN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1AddEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1AddEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1SubEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1SubEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1SubNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1MulEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1MulEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1DivEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1DivEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1DivNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1RemEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1RemEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1RemNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1ShlEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1ShlEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1ShlNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1ShrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1ShrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1ShrNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1AndEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1AndEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1OrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1OrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1XorEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1XorEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CeqEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CltEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CltEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CltNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CgtEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CgtEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt1CgtNE( unsigned int value1, unsigned int value2 );

#ifdef __cplusplus
#ifdef SDK

class PsUInt1
{
private:
	unsigned int m_value;

public:
	inline PsUInt1()
	{
	}

	inline PsUInt1( unsigned int value )
	{
		m_value = PSA_PsUInt1AssignXN( m_value, value );
	}

	inline PsUInt1( const PsUInt1 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int()
	{
		return PSA_PsUInt1ConvertEX( m_value, 1 );
	}

	inline unsigned int Value()
	{
		return PSA_PsUInt1ConvertEX( m_value, 1 );
	}

	inline PsUInt1 &operator = ( unsigned int value )
	{
		m_value = PSA_PsUInt1AssignXN( m_value, value );
		return *this;
	}

	inline PsUInt1 &operator = ( const PsUInt1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsUInt1 operator + ()
	{
		return *this;
	}

	inline PsUInt1 operator - ()
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1SubNE( 0, m_value );
		return temp;
	}

	inline PsUInt1 operator ~ ()
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1XorEN( m_value, ~0u );
		return temp;
	}

	inline PsUInt1 &operator ++ ()
	{
		m_value = PSA_PsUInt1AddEN( m_value, 1 );
		return *this;
	}

	inline PsUInt1 operator ++ ( int )
	{
		PsUInt1 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt1AddEN( m_value, 1 );
		return temp;
	}

	inline PsUInt1 &operator -- ()
	{
		m_value = PSA_PsUInt1SubEN( m_value, 1 );
		return *this;
	}

	inline PsUInt1 operator -- ( int )
	{
		PsUInt1 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt1SubEN( m_value, 1 );
		return temp;
	}

	inline PsUInt1 operator + ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1AddEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator + ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1AddEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator + ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1AddEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt1 &operator += ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1AddEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator += ( unsigned int value )
	{
		m_value = PSA_PsUInt1AddEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator - ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1SubEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator - ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1SubEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator - ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1SubNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt1 &operator -= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1SubEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator -= ( unsigned int value )
	{
		m_value = PSA_PsUInt1SubEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator * ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1MulEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator * ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1MulEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator * ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1MulEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt1 &operator *= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1MulEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator *= ( unsigned int value )
	{
		m_value = PSA_PsUInt1MulEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator / ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1DivEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator / ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1DivEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator / ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1DivNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt1 &operator /= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1DivEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator /= ( unsigned int value )
	{
		m_value = PSA_PsUInt1DivEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator % ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1RemEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator % ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1RemEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator % ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1RemNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt1 &operator %= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1RemEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator %= ( unsigned int value )
	{
		m_value = PSA_PsUInt1RemEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator << ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1ShlEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator << ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1ShlEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator << ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1ShlNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt1 &operator <<= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1ShlEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator <<= ( unsigned int value )
	{
		m_value = PSA_PsUInt1ShlEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator >> ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1ShrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator >> ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1ShrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator >> ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1ShrNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt1 &operator >>= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1ShrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator >>= ( unsigned int value )
	{
		m_value = PSA_PsUInt1ShrEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator & ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1AndEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator & ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1AndEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator & ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1AndEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt1 &operator &= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1AndEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator &= ( unsigned int value )
	{
		m_value = PSA_PsUInt1AndEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator | ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1OrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator | ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1OrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator | ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1OrEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt1 &operator |= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1OrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator |= ( unsigned int value )
	{
		m_value = PSA_PsUInt1OrEN( m_value, value );
		return *this;
	}

	inline PsUInt1 operator ^ ( PsUInt1 value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1XorEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt1 operator ^ ( unsigned int value )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1XorEN( m_value, value );
		return temp;
	}

	inline friend PsUInt1 operator ^ ( unsigned int value1, PsUInt1 value2  )
	{
		PsUInt1 temp;
		temp.m_value = PSA_PsUInt1XorEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt1 &operator ^= ( PsUInt1 value )
	{
		m_value = PSA_PsUInt1XorEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt1 &operator ^= ( unsigned int value )
	{
		m_value = PSA_PsUInt1XorEN( m_value, value );
		return *this;
	}

	inline bool operator == ( PsUInt1 value )
	{
		bool temp;
		temp = 0 != ( m_value == value.m_value );
		return temp;
	}

	inline bool operator == ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator == ( unsigned int value1, PsUInt1 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator != ( PsUInt1 value )
	{
		bool temp;
		temp = 0 != ( m_value != value.m_value );
		return temp;
	}

	inline bool operator != ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator != ( unsigned int value1, PsUInt1 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator < ( PsUInt1 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator < ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator < ( unsigned int value1, PsUInt1 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CltNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator <= ( PsUInt1 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator <= ( unsigned int value1, PsUInt1 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator > ( PsUInt1 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator > ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator > ( unsigned int value1, PsUInt1 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt1CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator >= ( PsUInt1 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator >= ( unsigned int value1, PsUInt1 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt1CltNE( value1, value2.m_value );
		return temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned int __stdcall PSA_PsUInt2ConvertEX( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2AssignXN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2AddEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2AddEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2SubEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2SubEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2SubNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2MulEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2MulEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2DivEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2DivEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2DivNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2RemEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2RemEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2RemNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2ShlEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2ShlEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2ShlNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2ShrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2ShrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2ShrNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2AndEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2AndEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2OrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2OrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2XorEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2XorEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CeqEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CltEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CltEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CltNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CgtEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CgtEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt2CgtNE( unsigned int value1, unsigned int value2 );

#ifdef __cplusplus
#ifdef SDK

class PsUInt2
{
private:
	unsigned int m_value;

public:
	inline PsUInt2()
	{
	}

	inline PsUInt2( unsigned int value )
	{
		m_value = PSA_PsUInt2AssignXN( m_value, value );
	}

	inline PsUInt2( const PsUInt2 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int()
	{
		return PSA_PsUInt2ConvertEX( m_value, 1 );
	}

	inline unsigned int Value()
	{
		return PSA_PsUInt2ConvertEX( m_value, 1 );
	}

	inline PsUInt2 &operator = ( unsigned int value )
	{
		m_value = PSA_PsUInt2AssignXN( m_value, value );
		return *this;
	}

	inline PsUInt2 &operator = ( const PsUInt2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsUInt2 operator + ()
	{
		return *this;
	}

	inline PsUInt2 operator - ()
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2SubNE( 0, m_value );
		return temp;
	}

	inline PsUInt2 operator ~ ()
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2XorEN( m_value, ~0u );
		return temp;
	}

	inline PsUInt2 &operator ++ ()
	{
		m_value = PSA_PsUInt2AddEN( m_value, 1 );
		return *this;
	}

	inline PsUInt2 operator ++ ( int )
	{
		PsUInt2 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt2AddEN( m_value, 1 );
		return temp;
	}

	inline PsUInt2 &operator -- ()
	{
		m_value = PSA_PsUInt2SubEN( m_value, 1 );
		return *this;
	}

	inline PsUInt2 operator -- ( int )
	{
		PsUInt2 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt2SubEN( m_value, 1 );
		return temp;
	}

	inline PsUInt2 operator + ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2AddEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator + ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2AddEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator + ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2AddEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt2 &operator += ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2AddEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator += ( unsigned int value )
	{
		m_value = PSA_PsUInt2AddEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator - ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2SubEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator - ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2SubEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator - ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2SubNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt2 &operator -= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2SubEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator -= ( unsigned int value )
	{
		m_value = PSA_PsUInt2SubEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator * ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2MulEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator * ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2MulEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator * ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2MulEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt2 &operator *= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2MulEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator *= ( unsigned int value )
	{
		m_value = PSA_PsUInt2MulEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator / ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2DivEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator / ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2DivEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator / ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2DivNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt2 &operator /= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2DivEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator /= ( unsigned int value )
	{
		m_value = PSA_PsUInt2DivEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator % ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2RemEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator % ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2RemEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator % ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2RemNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt2 &operator %= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2RemEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator %= ( unsigned int value )
	{
		m_value = PSA_PsUInt2RemEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator << ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2ShlEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator << ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2ShlEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator << ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2ShlNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt2 &operator <<= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2ShlEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator <<= ( unsigned int value )
	{
		m_value = PSA_PsUInt2ShlEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator >> ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2ShrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator >> ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2ShrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator >> ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2ShrNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt2 &operator >>= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2ShrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator >>= ( unsigned int value )
	{
		m_value = PSA_PsUInt2ShrEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator & ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2AndEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator & ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2AndEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator & ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2AndEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt2 &operator &= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2AndEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator &= ( unsigned int value )
	{
		m_value = PSA_PsUInt2AndEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator | ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2OrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator | ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2OrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator | ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2OrEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt2 &operator |= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2OrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator |= ( unsigned int value )
	{
		m_value = PSA_PsUInt2OrEN( m_value, value );
		return *this;
	}

	inline PsUInt2 operator ^ ( PsUInt2 value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2XorEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt2 operator ^ ( unsigned int value )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2XorEN( m_value, value );
		return temp;
	}

	inline friend PsUInt2 operator ^ ( unsigned int value1, PsUInt2 value2  )
	{
		PsUInt2 temp;
		temp.m_value = PSA_PsUInt2XorEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt2 &operator ^= ( PsUInt2 value )
	{
		m_value = PSA_PsUInt2XorEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt2 &operator ^= ( unsigned int value )
	{
		m_value = PSA_PsUInt2XorEN( m_value, value );
		return *this;
	}

	inline bool operator == ( PsUInt2 value )
	{
		bool temp;
		temp = 0 != ( m_value == value.m_value );
		return temp;
	}

	inline bool operator == ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator == ( unsigned int value1, PsUInt2 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator != ( PsUInt2 value )
	{
		bool temp;
		temp = 0 != ( m_value != value.m_value );
		return temp;
	}

	inline bool operator != ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator != ( unsigned int value1, PsUInt2 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator < ( PsUInt2 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator < ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator < ( unsigned int value1, PsUInt2 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CltNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator <= ( PsUInt2 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator <= ( unsigned int value1, PsUInt2 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator > ( PsUInt2 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator > ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator > ( unsigned int value1, PsUInt2 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt2CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator >= ( PsUInt2 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator >= ( unsigned int value1, PsUInt2 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt2CltNE( value1, value2.m_value );
		return temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned int __stdcall PSA_PsUInt3ConvertEX( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3AssignXN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3AddEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3AddEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3SubEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3SubEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3SubNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3MulEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3MulEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3DivEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3DivEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3DivNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3RemEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3RemEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3RemNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3ShlEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3ShlEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3ShlNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3ShrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3ShrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3ShrNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3AndEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3AndEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3OrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3OrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3XorEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3XorEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CeqEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CltEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CltEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CltNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CgtEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CgtEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt3CgtNE( unsigned int value1, unsigned int value2 );

#ifdef __cplusplus
#ifdef SDK

class PsUInt3
{
private:
	unsigned int m_value;

public:
	inline PsUInt3()
	{
	}

	inline PsUInt3( unsigned int value )
	{
		m_value = PSA_PsUInt3AssignXN( m_value, value );
	}

	inline PsUInt3( const PsUInt3 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int()
	{
		return PSA_PsUInt3ConvertEX( m_value, 1 );
	}

	inline unsigned int Value()
	{
		return PSA_PsUInt3ConvertEX( m_value, 1 );
	}

	inline PsUInt3 &operator = ( unsigned int value )
	{
		m_value = PSA_PsUInt3AssignXN( m_value, value );
		return *this;
	}

	inline PsUInt3 &operator = ( const PsUInt3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsUInt3 operator + ()
	{
		return *this;
	}

	inline PsUInt3 operator - ()
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3SubNE( 0, m_value );
		return temp;
	}

	inline PsUInt3 operator ~ ()
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3XorEN( m_value, ~0u );
		return temp;
	}

	inline PsUInt3 &operator ++ ()
	{
		m_value = PSA_PsUInt3AddEN( m_value, 1 );
		return *this;
	}

	inline PsUInt3 operator ++ ( int )
	{
		PsUInt3 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt3AddEN( m_value, 1 );
		return temp;
	}

	inline PsUInt3 &operator -- ()
	{
		m_value = PSA_PsUInt3SubEN( m_value, 1 );
		return *this;
	}

	inline PsUInt3 operator -- ( int )
	{
		PsUInt3 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt3SubEN( m_value, 1 );
		return temp;
	}

	inline PsUInt3 operator + ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3AddEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator + ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3AddEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator + ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3AddEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt3 &operator += ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3AddEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator += ( unsigned int value )
	{
		m_value = PSA_PsUInt3AddEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator - ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3SubEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator - ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3SubEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator - ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3SubNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt3 &operator -= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3SubEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator -= ( unsigned int value )
	{
		m_value = PSA_PsUInt3SubEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator * ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3MulEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator * ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3MulEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator * ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3MulEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt3 &operator *= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3MulEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator *= ( unsigned int value )
	{
		m_value = PSA_PsUInt3MulEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator / ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3DivEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator / ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3DivEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator / ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3DivNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt3 &operator /= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3DivEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator /= ( unsigned int value )
	{
		m_value = PSA_PsUInt3DivEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator % ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3RemEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator % ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3RemEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator % ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3RemNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt3 &operator %= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3RemEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator %= ( unsigned int value )
	{
		m_value = PSA_PsUInt3RemEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator << ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3ShlEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator << ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3ShlEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator << ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3ShlNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt3 &operator <<= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3ShlEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator <<= ( unsigned int value )
	{
		m_value = PSA_PsUInt3ShlEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator >> ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3ShrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator >> ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3ShrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator >> ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3ShrNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt3 &operator >>= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3ShrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator >>= ( unsigned int value )
	{
		m_value = PSA_PsUInt3ShrEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator & ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3AndEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator & ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3AndEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator & ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3AndEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt3 &operator &= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3AndEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator &= ( unsigned int value )
	{
		m_value = PSA_PsUInt3AndEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator | ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3OrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator | ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3OrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator | ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3OrEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt3 &operator |= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3OrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator |= ( unsigned int value )
	{
		m_value = PSA_PsUInt3OrEN( m_value, value );
		return *this;
	}

	inline PsUInt3 operator ^ ( PsUInt3 value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3XorEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt3 operator ^ ( unsigned int value )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3XorEN( m_value, value );
		return temp;
	}

	inline friend PsUInt3 operator ^ ( unsigned int value1, PsUInt3 value2  )
	{
		PsUInt3 temp;
		temp.m_value = PSA_PsUInt3XorEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt3 &operator ^= ( PsUInt3 value )
	{
		m_value = PSA_PsUInt3XorEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt3 &operator ^= ( unsigned int value )
	{
		m_value = PSA_PsUInt3XorEN( m_value, value );
		return *this;
	}

	inline bool operator == ( PsUInt3 value )
	{
		bool temp;
		temp = 0 != ( m_value == value.m_value );
		return temp;
	}

	inline bool operator == ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator == ( unsigned int value1, PsUInt3 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator != ( PsUInt3 value )
	{
		bool temp;
		temp = 0 != ( m_value != value.m_value );
		return temp;
	}

	inline bool operator != ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator != ( unsigned int value1, PsUInt3 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator < ( PsUInt3 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator < ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator < ( unsigned int value1, PsUInt3 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CltNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator <= ( PsUInt3 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator <= ( unsigned int value1, PsUInt3 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator > ( PsUInt3 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator > ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator > ( unsigned int value1, PsUInt3 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt3CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator >= ( PsUInt3 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator >= ( unsigned int value1, PsUInt3 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt3CltNE( value1, value2.m_value );
		return temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned int __stdcall PSA_PsUInt4ConvertEX( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4AssignXN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4AddEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4AddEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4SubEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4SubEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4SubNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4MulEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4MulEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4DivEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4DivEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4DivNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4RemEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4RemEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4RemNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4ShlEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4ShlEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4ShlNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4ShrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4ShrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4ShrNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4AndEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4AndEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4OrEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4OrEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4XorEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4XorEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CeqEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CltEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CltEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CltNE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CgtEE( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CgtEN( unsigned int value1, unsigned int value2 );
unsigned int __stdcall PSA_PsUInt4CgtNE( unsigned int value1, unsigned int value2 );

#ifdef __cplusplus
#ifdef SDK

class PsUInt4
{
private:
	unsigned int m_value;

public:
	inline PsUInt4()
	{
	}

	inline PsUInt4( unsigned int value )
	{
		m_value = PSA_PsUInt4AssignXN( m_value, value );
	}

	inline PsUInt4( const PsUInt4 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int()
	{
		return PSA_PsUInt4ConvertEX( m_value, 1 );
	}

	inline unsigned int Value()
	{
		return PSA_PsUInt4ConvertEX( m_value, 1 );
	}

	inline PsUInt4 &operator = ( unsigned int value )
	{
		m_value = PSA_PsUInt4AssignXN( m_value, value );
		return *this;
	}

	inline PsUInt4 &operator = ( const PsUInt4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsUInt4 operator + ()
	{
		return *this;
	}

	inline PsUInt4 operator - ()
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4SubNE( 0, m_value );
		return temp;
	}

	inline PsUInt4 operator ~ ()
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4XorEN( m_value, ~0u );
		return temp;
	}

	inline PsUInt4 &operator ++ ()
	{
		m_value = PSA_PsUInt4AddEN( m_value, 1 );
		return *this;
	}

	inline PsUInt4 operator ++ ( int )
	{
		PsUInt4 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt4AddEN( m_value, 1 );
		return temp;
	}

	inline PsUInt4 &operator -- ()
	{
		m_value = PSA_PsUInt4SubEN( m_value, 1 );
		return *this;
	}

	inline PsUInt4 operator -- ( int )
	{
		PsUInt4 temp;
		temp.m_value = m_value;
		m_value = PSA_PsUInt4SubEN( m_value, 1 );
		return temp;
	}

	inline PsUInt4 operator + ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4AddEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator + ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4AddEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator + ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4AddEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt4 &operator += ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4AddEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator += ( unsigned int value )
	{
		m_value = PSA_PsUInt4AddEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator - ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4SubEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator - ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4SubEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator - ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4SubNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt4 &operator -= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4SubEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator -= ( unsigned int value )
	{
		m_value = PSA_PsUInt4SubEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator * ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4MulEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator * ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4MulEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator * ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4MulEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt4 &operator *= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4MulEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator *= ( unsigned int value )
	{
		m_value = PSA_PsUInt4MulEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator / ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4DivEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator / ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4DivEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator / ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4DivNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt4 &operator /= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4DivEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator /= ( unsigned int value )
	{
		m_value = PSA_PsUInt4DivEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator % ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4RemEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator % ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4RemEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator % ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4RemNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt4 &operator %= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4RemEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator %= ( unsigned int value )
	{
		m_value = PSA_PsUInt4RemEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator << ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4ShlEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator << ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4ShlEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator << ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4ShlNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt4 &operator <<= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4ShlEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator <<= ( unsigned int value )
	{
		m_value = PSA_PsUInt4ShlEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator >> ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4ShrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator >> ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4ShrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator >> ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4ShrNE( value1, value2.m_value );
		return temp;
	}

	inline PsUInt4 &operator >>= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4ShrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator >>= ( unsigned int value )
	{
		m_value = PSA_PsUInt4ShrEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator & ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4AndEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator & ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4AndEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator & ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4AndEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt4 &operator &= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4AndEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator &= ( unsigned int value )
	{
		m_value = PSA_PsUInt4AndEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator | ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4OrEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator | ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4OrEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator | ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4OrEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt4 &operator |= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4OrEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator |= ( unsigned int value )
	{
		m_value = PSA_PsUInt4OrEN( m_value, value );
		return *this;
	}

	inline PsUInt4 operator ^ ( PsUInt4 value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4XorEE( m_value, value.m_value );
		return temp;
	}

	inline PsUInt4 operator ^ ( unsigned int value )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4XorEN( m_value, value );
		return temp;
	}

	inline friend PsUInt4 operator ^ ( unsigned int value1, PsUInt4 value2  )
	{
		PsUInt4 temp;
		temp.m_value = PSA_PsUInt4XorEN( value2.m_value, value1 );
		return temp;
	}

	inline PsUInt4 &operator ^= ( PsUInt4 value )
	{
		m_value = PSA_PsUInt4XorEE( m_value, value.m_value );
		return *this;
	}

	inline PsUInt4 &operator ^= ( unsigned int value )
	{
		m_value = PSA_PsUInt4XorEN( m_value, value );
		return *this;
	}

	inline bool operator == ( PsUInt4 value )
	{
		bool temp;
		temp = 0 != ( m_value == value.m_value );
		return temp;
	}

	inline bool operator == ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator == ( unsigned int value1, PsUInt4 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator != ( PsUInt4 value )
	{
		bool temp;
		temp = 0 != ( m_value != value.m_value );
		return temp;
	}

	inline bool operator != ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CeqEN( m_value, value );
		return temp;
	}

	inline friend bool operator != ( unsigned int value1, PsUInt4 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CeqEN( value2.m_value, value1 );
		return temp;
	}

	inline bool operator < ( PsUInt4 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator < ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator < ( unsigned int value1, PsUInt4 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CltNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator <= ( PsUInt4 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator <= ( unsigned int value1, PsUInt4 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator > ( PsUInt4 value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CgtEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator > ( unsigned int value )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CgtEN( m_value, value );
		return temp;
	}

	inline friend bool operator > ( unsigned int value1, PsUInt4 value2  )
	{
		bool temp;
		temp = 0 != PSA_PsUInt4CgtNE( value1, value2.m_value );
		return temp;
	}

	inline bool operator >= ( PsUInt4 value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CltEE( m_value, value.m_value );
		return temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CltEN( m_value, value );
		return temp;
	}

	inline friend bool operator >= ( unsigned int value1, PsUInt4 value2  )
	{
		bool temp;
		temp = 0 == PSA_PsUInt4CltNE( value1, value2.m_value );
		return temp;
	}

};

#endif
#endif

