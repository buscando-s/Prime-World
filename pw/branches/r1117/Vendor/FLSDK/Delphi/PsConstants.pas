//
//  PsConstants.pas
//
//  Description:
//      Constants for SDK.
//
//  Notes:
//      Detailed info about constants see in PsConstants.h.
//

//
// I. Status codes
//

// Common status codes common with NTSTATUS (without messages)
const
  PSC_STATUS_SUCCESS												= $00000000;
  PSC_STATUS_UNSUCCESSFUL											= $C0000001;
  PSC_STATUS_INVALID_HANDLE											= $C0000008;
  PSC_STATUS_INVALID_PARAMETER										= $C000000D;
  PSC_STATUS_ACCESS_DENIED											= $C0000022;
  PSC_STATUS_BUFFER_TOO_SMALL										= $C0000023;

// Common error codes (with messages)
const
{$IFDEF PS_USE_LOCAL_MACHINE_STORAGE}
  PSC_FATAL_REGISTRY_ACCESS_ERROR									= $E1003018;
{$ELSE}
  PSC_FATAL_REGISTRY_ACCESS_ERROR									= $E1003003;
{$ENDIF}
  PSC_FATAL_HARDWARE_ACCESS_ERROR									= $E1003024;

// License control status codes (without messages)
const
  PSC_STATUS_LICENSE_NOT_FOUND										= $E2000001;
  PSC_STATUS_INVALID_ACTIVATION_KEY									= $E2000004;
  PSC_STATUS_KEY_IS_INVALID											= $E2000005;
  PSC_STATUS_VALID_HARDWARE_KEY										= $E2000007;
  PSC_STATUS_NEW_TRIAL_LICENSE_CREATED								= $E2000008;
  PSC_STATUS_LICENSE_ALREADY_DEACTIVATED							= $E2000009;
  PSC_STATUS_START_IN_TRIAL_MODE_IS_NOT_ALLOWED						= $E200000D;
  PSC_STATUS_UNABLE_TO_REGISTER_MESSAGE_DLL							= $E2000013;

// Driver errors (with messages)
const
  PSC_FATAL_DRIVER_USAGE_CONFLICT									= $E100300F;
  PSC_FATAL_DRIVER_DEBUGGER_DETECTED								= $E1003007;
  PSC_FATAL_DRIVER_SAFE_MODE_DETECTED								= $E1003019;
  PSC_FATAL_DRIVER_ERROR											= $E1003020;

// Internal status codes (without messages)
const
  PSC_STATUS_DRIVERS_INSTALLATION_CANCELLED							= $21000004;
  PSC_STATUS_RESELECT_INITILIZATION_TYPE							= $21000001;
  PSC_STATUS_SUCCESS_NON_COMMERCIAL_KEY								= $21000002;
  PSC_STATUS_SET_INITIALIZATION_TYPE_DISC_WITH_BACKUP_DISC_MODE		= $21000003;
  PSC_STATUS_CALL_ACTIVATOR											= $21000005;

// Internal error codes (without messages)
const
  PSC_STATUS_ABORTED_BY_USER										= $E2000014;
  PSC_STATUS_RETRY_REQUIRED_BY_USER									= $E2000015;
  PSC_STATUS_BAD_FORMAT												= $E200000E;
  PSC_STATUS_ERROR_IN_WINAPI										= $E200000F;
  PSC_STATUS_ALREADY_OPENED											= $E2000010;
  PSC_STATUS_UNABLE_TO_GET_TIME										= $E2000016;
  PSC_STATUS_MEMORY_LOCKING_FAILED									= $E2003052;
  PSC_STATUS_INITIALIZATION_FAILED	          						= $E2003053;
  PSC_STATUS_DISC_SYNC_LOCK_FAILED									= $E2003054;
  PSC_STATUS_INTERNAL_ERROR_SYNCRONIZATION							= $E2003056; 
  PSC_STATUS_INTERNAL_ERROR_ACTIVATION								= $E2003057;
  PSC_STATUS_DISC_UNABLE_TO_COPY_LABEL								= $E2003058;
  PSC_STATUS_UNABLE_TO_COPY_INFO_BUFFER								= $E200F001;
  PSC_STATUS_UNABLE_TO_GET_ERROR_BUFFER								= $E200000A;
  PSC_STATUS_INVALID_OPERATION										= $E200000B;
  PSC_STATUS_ERROR_IN_PSAPI											= $E200000C;
  PSC_STATUS_DRIVER_INCOMPATIBLE_OS									= $E2003002;

// Intialization fatal codes (with messages)
const
  PSC_FATAL_UNSUPPORTED_PROCESSOR									= $E1003001;
  PSC_FATAL_MULTIPLE_INSTANCES_CONFLICT								= $E1003004;
  PSC_FATAL_INVALID_TIME_SETTINGS									= $E1003055;
  PSC_FATAL_APPLICATIONS_RUNNING									= $E100309A;
  PSC_FATAL_ACTIVATOR_RUNNING										= $E100309B;
  PSC_FATAL_FILE_SYSTEM_INITIALIZATION_FAILED						= $E1003022;
  PSC_FATAL_PC_EMULATOR_DETECTED									= $E1003025;
  PSC_FATAL_REMOTE_SESSION_DETECTED									= $E1003030;
  PSC_FATAL_MODULE_INFECTED											= $E1003014;
  PSC_FATAL_DEBUGGER_DETECTED										= $E1003007;
  PSC_FATAL_BAD_PROCESS_OWNER										= $E1003010;

// Miscellaneous error codes (with messages)
const
  PSC_ERROR_KEY_MISTYPED											= $A1003037;

// Communication error codes (with messages)
const
  PSC_ERROR_SOCKET_IO_FAILED										= $A1003287;
  PSC_ERROR_SOCKET_ERROR											= $A1003281;
  PSC_ERROR_UNABLE_TO_CONNECT										= $A1003286;
  PSC_ERROR_INVALID_RESPONSE										= $A100328E;
  PSC_ERROR_PROXY_AUTHENTICATION_FAILED								= $A1003292;

// Communication error codes (with messages)
const
  PSC_STATUS_COMMUNICATOR_SOCKET_IO_FAILED							= $E2003287;
  PSC_STATUS_COMMUNICATOR_SOCKET_ERROR								= $E2003281;
  PSC_STATUS_COMMUNICATOR_UNABLE_TO_CONNECT							= $E2003286;
  PSC_STATUS_COMMUNICATOR_INVALID_RESPONSE							= $E200328E;

// Disc error codes (common)
const
  PSC_ERROR_DISC_UNABLE_TO_READ_VALID_KEY_FROM_DISC					= $A100313D;
  PSC_ERROR_DISC_NOT_FOUND											= $A1003102;
  PSC_ERROR_DISC_MORE_THEN_ONE_PRODUCT_DISC							= $A100313A;
  PSC_ERROR_DISC_IO_ERROR											= $A1003121;
  PSC_STATUS_DISC_INSERT_DISC_INTO_ANOTHER_DRIVE					= $E2003120;	// Not used (obsolete)

// Disc error codes (check failed)
const
  PSC_ERROR_DISC_CHECK_CANCELLED									= $A1003125;
  PSC_ERROR_DISC_CHECK_FAILED										= $A1003126;
  PSC_ERROR_DISC_CHECK_FAILED_FOR_INTERNAL_KEY 						= $A1003130;
  PSC_ERROR_DISC_COPY_DETECTED										= $A1003142;
  PSC_ERROR_DISC_EMULATOR_DETECTED									= $A1003141;
  PSC_ERROR_DISC_FILTER_DETECTED									= PSC_ERROR_DISC_EMULATOR_DETECTED;
  PSC_ERROR_DISC_SYNC_DRIVER_PATCHED								= PSC_ERROR_DISC_EMULATOR_DETECTED;
  PSC_ERROR_DISC_SYNC_DRIVER_CALLBACKS_DEAD							= PSC_ERROR_DISC_EMULATOR_DETECTED;
  PSC_ERROR_DISC_SYNC_DRIVER_MODULES_INFO_INCONSISTENT				= PSC_ERROR_DISC_EMULATOR_DETECTED;
{$IFDEF PS_READ_KEY_FROM_DISC}
  PSC_ERROR_DISC_DVD_WRITABLE_MEDIA									= PSC_ERROR_DISC_COPY_DETECTED;
  PSC_ERROR_DISC_CD_WRITABLE_MEDIA_OR_INVALID_ATIP					= PSC_ERROR_DISC_COPY_DETECTED;
  PSC_ERROR_DISC_DATA_CHECK_FAILED									= PSC_ERROR_DISC_CHECK_FAILED_FOR_INTERNAL_KEY;
{$ELSE}
{$IFDEF PS_DISC_CHECK_WRITABLE_MEDIA_ONLY}
  PSC_ERROR_DISC_DVD_WRITABLE_MEDIA									= PSC_ERROR_DISC_COPY_DETECTED;
  PSC_ERROR_DISC_CD_WRITABLE_MEDIA_OR_INVALID_ATIP					= PSC_ERROR_DISC_COPY_DETECTED;
{$ELSE}
  PSC_ERROR_DISC_DVD_WRITABLE_MEDIA									= PSC_ERROR_DISC_COPY_DETECTED;
  PSC_ERROR_DISC_CD_WRITABLE_MEDIA_OR_INVALID_ATIP					= PSC_ERROR_DISC_COPY_DETECTED;
{$ENDIF}
  PSC_ERROR_DISC_DATA_CHECK_FAILED									= PSC_ERROR_DISC_CHECK_FAILED;
{$ENDIF}

// Disc error codes (license expiration and deactivation)
const
  PSC_ERROR_LICENSE_DEACTIVATED_FOR_DISC_KEY						= $A100322C;
  PSC_FATAL_TIME_CHECK_FAILED_FOR_DISC_KEY							= $E100312A;
  PSC_ERROR_CLOCK_SET_BACKWARD_FOR_DISC_KEY							= $A100312C;
  PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_DISC_KEY						= $A1003145;
  PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_DISC_KEY				= $A1003128;
  PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_DISC_KEY				= $A1003146;

// Activation error codes (common)
const
  PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_ACTIVATION_KEY			= $A1003206;
  PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_ACTIVATION_KEY				= $A1003204;
  PSC_ERROR_REGISTERED_PROFILE_NOT_FOUND_FOR_ACTIVATION_KEY			= $A1003207;
  PSC_FATAL_INVALID_RECEIVED_KEY									= $E1003290;

// Activation error codes 
const
  PSC_ERROR_LICENSE_DEACTIVATED_FOR_ACTIVATION_KEY					= $A1003228;
  PSC_ERROR_CLOCK_SET_BACKWARD_FOR_ACTIVATION_KEY					= $A100320B;
  PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_ACTIVATION_KEY				= $A1003223;
  PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_ACTIVATION_KEY			= $A100320F;
  PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_ACTIVATION_KEY			= $A1003219;
  PSC_FATAL_TIME_CHECK_FAILED_FOR_ACTIVATION_KEY					= $E1003205;

// Deactivation error codes
const
  PSC_ERROR_LICENSE_NOT_FOUND_FOR_DEACTIVATION						= $A100322D;
  PSC_ERROR_HARDWARE_CHECK_FAILED_WHILE_DEACTIVATION				= $A1003231;
  PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_WHILE_DEACTIVATION			= $A1003232;
  PSC_ERROR_LICENSE_EXPIRED_WHILE_DEACTIVATION						= $A1003233;
  PSC_FATAL_TIME_CHECK_FAILED_WHILE_DEACTIVATION					= $A1003234;
  PSC_ERROR_CLOCK_SET_BACKWARD_WHILE_DEACTIVATION					= $A1003235;
  PSC_ERROR_LICENSE_DEACTIVATED_WHILE_DEACTIVATION					= $A1003236;
  PSC_ERROR_DEACTIVATIONS_EXHAUSTED									= $E100305C;


// Trial error codes
const
  PSC_ERROR_INTEGRITY_CHECK_FAILED_FOR_TRIAL_INFO					= $A1003213;
  PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY		= $A1003212;
  PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY			= $A1003210;
  PSC_FATAL_UNABLE_TO_REMOVE_TRIAL_INFO								= $E1003217;

// Trial error codes (license expiration and deactivation)
const
  PSC_STATUS_LICENSE_DEACTIVATED_FOR_TRIAL_ACTIVATION_KEY			= $E2003229;	// Not used
  PSC_ERROR_CLOCK_SET_BACKWARD_FOR_TRIAL_ACTIVATION_KEY				= $A1003214;
  PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY			= $A1003224;
  PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY	= $A1003215;
  PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY	= $A1003220;
  PSC_FATAL_TIME_CHECK_FAILED_FOR_TRIAL_ACTIVATION_KEY				= $E1003211;

// Rescue error codes
const
  PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_RESCUE_KEY				= $A100312E;
  PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_RESCUE_KEY					= $A1003127;
  PSC_ERROR_LICENSE_OR_REGISTERED_PROFILE_NOT_FOUND_FOR_RESCUE_KEY	= $A1003123;

// Rescue error codes (license expiration and deactivation)
const
  PSC_STATUS_LICENSE_DEACTIVATED_FOR_RESCUE_KEY						= $E200322A;	// Not used
  PSC_ERROR_CLOCK_SET_BACKWARD_FOR_RESCUE_KEY						= $A100312D;
  PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_RESCUE_KEY					= $A1003225;
  PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_RESCUE_KEY				= $A1003129;
  PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_RESCUE_KEY				= $A1003221;
  PSC_FATAL_TIME_CHECK_FAILED_FOR_RESCUE_KEY						= $E100312B;

// Auto activation error codes (without messages)
const
  PSC_STATUS_AUTO_ACTIVATION_CANCELLED								= $E200001F;
  PSC_STATUS_AUTO_ACTIVATION_DENIED									= $E2000020;
  PSC_STATUS_AUTO_ACTIVATION_FAILED									= $E2000021;

// Auto activation error codes
const
  PSC_ERROR_KEY_INTEGRITY_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY		= $A1003136;
  PSC_ERROR_HARDWARE_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY			= $A1003133;
  PSC_ERROR_REGISTERED_PROFILE_NOT_FOUND_FOR_AUTO_ACTIVATION_KEY	= $A1003137;

// Auto activation error codes (license expiration and deactivation)
const
  PSC_STATUS_LICENSE_DEACTIVATED_FOR_AUTO_ACTIVATION_KEY			= $E200322B;	// Not used
  PSC_ERROR_CLOCK_SET_BACKWARD_FOR_AUTO_ACTIVATION_KEY				= $A1003138;
  PSC_ERROR_LIFE_TIME_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY			= $A1003226;
  PSC_ERROR_NUMBER_OR_RUNS_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY		= $A1003134;
  PSC_ERROR_EXECUTION_TIME_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY		= $A1003222;
  PSC_FATAL_TIME_CHECK_FAILED_FOR_AUTO_ACTIVATION_KEY				= $E1003135;

// Server binding status codes (without messages)
const
  PSC_STATUS_SRVBND_SERVER_SESSION_LOCKED							= $E2000017;
  PSC_STATUS_SRVBND_SERVER_INVALID_SESSION_INTEGRITY				= $E2000018;
  PSC_STATUS_SRVBND_INVALID_REQUEST									= $E2000019;
  PSC_STATUS_SRVBND_INVALID_REQUEST_NUMBER							= $E200001A;
  PSC_STATUS_SRVBND_ERROR_WITH_MESSAGE_RETRY_IS_POSSIBLE			= $E200001B;
  PSC_STATUS_SRVBND_ERROR_WITH_MESSAGE_RETRY_IS_NOT_POSSIBLE		= $E200001C;
  PSC_STATUS_SRVBND_SERVER_SESSION_NOT_FOUND						= $E200001E;

// Server binding error codes (with messages)
const
  PSC_ERROR_SRVBND_TOO_MANY_CONNECTIONS								= $A1003300;
  PSC_ERROR_SRVBND_UNABLE_TO_LOAD_PROTECTION_LIBRARY_ON_SERVER		= $A1003301;
  PSC_ERROR_SRVBND_UNABLE_TO_CONNECT								= $A1003302;	// Not used (preserved for future use)
  PSC_ERROR_SRVBND_IO_ERROR											= $A1003303;	// Not used (preserved for future use)
  PSC_ERROR_SRVBND_SESSION_NOT_APPROVED								= $A1003304;
  PSC_ERROR_SRVBND_INVALID_RESPONSE									= $A100330A;

//
//	II. Process exit codes
//

//
//	Exit codes of protected application
//

// License has expired (this code is returned if the option for termination
// of application after expiration of the license is enabled)
const
  PSC_EXIT_CODE_LICENSE_EXPIRED							= $C0000071;	// NTSTATUS: STATUS_PASSWORD_EXPIRED

// Connection to binding server has been lost
const
  PSC_EXIT_CODE_SRVBND_SESSION_LOST						= $C000020C;	// NTSTATUS: STATUS_CONNECTION_DISCONNECTED

// Unknown error in protection module
const
  PSC_EXIT_CODE_UNKNOWN_ERROR							= $C0000001;	// NTSTATUS: STATUS_UNSUCCESSFUL

// Process has been terminated by protect.exe (for rebooting during
// installation of drivers)
const
  PSC_EXIT_CODE_EXTERNAL_TERMINATION					= $C000020C;	// NTSTATUS: STATUS_CONNECTION_DISCONNECTED

//
//	Exit codes of protect.exe (in driver installer mode) for following commands:
//		protect.exe /drv:install /nogui [/forcereboot]
//		protect.exe /drv:uninstall /nogui [/forcereboot]
//		protect.exe /drv:remove /nogui [/forcereboot]
//

// Operation successfully completed
const
  PSC_EXIT_CODE_DRIVER_SUCCESS							= 0;

// Operation failed: unknown error occured
const
  PSC_EXIT_CODE_DRIVER_ERROR							= 1;

// Reboot required for completing of operation
const
  PSC_EXIT_CODE_DRIVER_NEED_REBOOT						= 2;

// Operation failed: administrator privilegies required
const
  PSC_EXIT_CODE_DRIVER_NEED_ADMINISTRATOR				= 3;

// Operation failed: Conflict with another application (close all applications)
const
  PSC_EXIT_CODE_USAGE_CONFLICT							= 4;

// Operation failed: debugger detected
const
  PSC_EXIT_CODE_DRIVER_DEBUGGER_DETECTED				= 5;

// Operation failed: incompatible OS detected
const
  PSC_EXIT_CODE_DRIVER_INCOMPATIBLE_OS					= 6;

// Operation failed: OS is running in safe mode
const
  PSC_EXIT_CODE_DRIVER_SAFE_MODE						= 7;

// Operation failed: cancelled by user
const
  PSC_EXIT_CODE_DRIVER_CANCELLED						= 9;

//
//	Exit codes of protect.exe (in driver installer mode) for following command:
//		protect.exe /drv:check /nogui
//

// Drivers are not installed
const
  PSC_EXIT_CODE_DRIVERS_NOT_INSTALLED					= 0;

// Drivers are installed
const
  PSC_EXIT_CODE_DRIVER_INSTALLED						= 1;

//
//	III. Miscellaneous constants
//

// Maximum key length
const
  KEY_MAX_SYMBOLIC_LENGTH								= 320;

// Maximum number of information codes returned by PSC_GetErrorInformation
const
  ERR_MAXIMUM_NUMBER_OF_INFORMATION_CODES				= 64;

// Initialization types (argument of PSC_StartInitialization)
const
  PS_INITIALIZATION_TYPE_SIMPLE							= 0;
  PS_INITIALIZATION_TYPE_DISC							= 1;
  PS_INITIALIZATION_TYPE_HARDWARE						= 2;
  PS_INITIALIZATION_TYPE_EXTERNAL						= 4;
  PS_INITIALIZATION_TYPE_SERVER							= 8;
  PS_INITIALIZATION_TYPE_DISC_WITH_BACKUP				= 32;
  PS_INITIALIZATION_TYPE_DISC_WITH_BACKUP_DISC_MODE		= $10000000;
  PS_INITIALIZATION_TYPE_DISC_WITH_BACKUP_BACKUP_MODE	= $20000000;
  PS_INITIALIZATION_TYPE_UNDEFINED						= $FFFFFFFF;

// EIM mode
const
  PS_EIM_MODE_DISABLED									= 0;
  PS_EIM_MODE_LOADER									= 1;
  PS_EIM_MODE_APPLICATION								= 2;

//
//	IV. Names of global events
//

// No GUI Mode event
const
  PS_EVENT_NAME_PREFIX_GUI_NOT_AVAILABLE_MODE				= '{89E323B4-B99D-4D0A-8980-887714794544} - ';

// EIM application started event
const
  PS_EVENT_NAME_PREFIX_EIM_APPLICATION_STARTED_USING_LOADER	= '{3AF31710-DE40-4ea3-90CD-24142E2F05D4} - ';

// Local event to mark deactivation mode of activator
const
  PS_EVENT_NAME_PREFIX_DEACTIVATION							= '{E895772A-B8CB-4ebf-9B89-EA4C6F8064BB} - ';
