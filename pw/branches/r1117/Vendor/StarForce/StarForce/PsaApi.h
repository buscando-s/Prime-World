//
//	PsaApi.h
//
//	File description:
//		Header file for public API functions. These functions can be used in
//      initialization module as well as in protected application.
//

// Include this file only once
#pragma once

#ifdef NOIMPORTPSAPI
#define PSAPI __stdcall
#else
#define PSAPI __declspec(dllimport) __stdcall
#endif

// Additional headers
#ifndef PS_CONFIG_H_INCLUDED_7D7370D6_8681_4908_8C5F_D1152CF38653
#define PS_CONFIG_H_INCLUDED_7D7370D6_8681_4908_8C5F_D1152CF38653
#include "PsConfig.h"
#endif
#ifndef PS_CONSTANTS_H_INCLUDED_7990EBEC_1968_44FF_AF44_6800920821F1
#define PS_CONSTANTS_H_INCLUDED_7990EBEC_1968_44FF_AF44_6800920821F1
#include "PsConstants.h"
#endif

//
//	Common functions
//

//
//	Description:
//		Dummy reference (simply returns the control). Linker can exclude
//		protect.dll from import table if no functions are used. So, this
//		function can be inserted into any part of application code to
//		prevent this.
//
void PSAPI PSA_DummyFunction();

//
//	Description:
//		Uninitialize protection core resources before unloading of protect.dll
//		or before exit.
//		The protection core can create threads for periodical checking of
//		license expiration etc. If protect.dll will be unloaded using
//		FreeLibrary( someProtectedDllHandle ) these threads will be	stopped
//		by operating system and resources that are allocated in these threads
//		will not be freed. It can lead to resource leaks if	the protected .DLL
//		is loaded and unloaded many times.
//		If you protect only .EXE files or there are no multiple
//		loading/unloading of protected .DLL files the call to this function
//		is not mandatory.
//
//	Output:
//		Return value - PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_Uninitialize();

#ifdef PS_USE_LICENSES

//
//	Description:
//		Get registry path and base handle for license.
//
//	Input:
//		pathBuffer					- buffer for path
//		pathBufferSizeInWideChars	- buffer size
//		registryBaseHandle			- buffer for base handle
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//		*pathBuffer					- path (Unicode zero-terminated string)
//		*pathBufferSizeInWideChars	- used buffer size (or required buffer
//			size is return value is PSC_STATUS_BUFFER_TOO_SMALL)
//		*registryBaseHandle			- buffer for base handle
//
unsigned __int32 PSAPI PSA_GetLicenseStoragePath(
	wchar_t *pathBuffer,
	size_t *pathBufferSizeInWideChars,
	HANDLE *registryBaseHandle );

// License version (see PSA_GetLicenseInformation)
#define LIC_VERSION_UNDEFINED								0xFFFFFFFF
#define LIC_VERSION_0_DISC									0
#define LIC_VERSION_1_HARDWARE								1
#define LIC_VERSION_5_HARDWARE								5
#define LIC_VERSION_6_HARDWARE								6
#define LIC_VERSION_7_HARDWARE								7
#define LIC_VERSION_9_HARDWARE								9

// License types (see PSA_GetLicenseInformation)
#define LIC_TYPE_UNDEFINED									0xFFFFFFFF
#define LIC_TYPE_HARDWARE									0
#define LIC_TYPE_HARDWARE_TRIAL								1
#define LIC_TYPE_HARDWARE_RESCUE							2
#define LIC_TYPE_HARDWARE_AUTOGENERATED_AFTER_DISC_CHECK	3
#define LIC_TYPE_DISC										4

//
//	Description:
//		Get special information for current license.
//
//	Input:
//		version			- buffer for license version
//		type			- buffer for license type
//		nonCommercial	- buffer for non-commercial flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*version		- license version
//		*type			- license type
//		*nonCommercial	- non-commercial flag
//
//	Registry keys for debugging:
//		"LicenseVersion", "LicenseType", "IsNonCommercialLicense" of type
//		REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseInformation(
	unsigned __int32 *version,
	unsigned __int32 *type,
	bool *nonCommercial );

#endif

//
//	Limitation of functionality
//

#ifdef PS_USE_LICENSES

// Codes of independent features that can be granted by license
#define PSA_GrantedFeature0			0x00000001
#define PSA_GrantedFeature1			0x00000002
#define PSA_GrantedFeature2			0x00000004
#define PSA_GrantedFeature3			0x00000008
#define PSA_GrantedFeature4			0x00000010
#define PSA_GrantedFeature5			0x00000020
#define PSA_GrantedFeature6			0x00000040
#define PSA_GrantedFeature7			0x00000080
#define PSA_GrantedFeature8			0x00000100
#define PSA_GrantedFeature9			0x00000200
#define PSA_GrantedFeature10		0x00000400
#define PSA_GrantedFeature11		0x00000800
#define PSA_GrantedFeature12		0x00001000
#define PSA_GrantedFeature13		0x00002000
#define PSA_GrantedFeature14		0x00004000
#define PSA_GrantedFeature15		0x00008000
#define PSA_GrantedFeature16		0x00010000
#define PSA_GrantedFeature17		0x00020000
#define PSA_GrantedFeature18		0x00040000
#define PSA_GrantedFeature19		0x00080000
#define PSA_GrantedFeature20		0x00100000
#define PSA_GrantedFeature21		0x00200000
#define PSA_GrantedFeature22		0x00400000
#define PSA_GrantedFeature23		0x00800000
#define PSA_GrantedFeature24		0x01000000
#define PSA_GrantedFeature25		0x02000000
#define PSA_GrantedFeature26		0x04000000
#define PSA_GrantedFeature27		0x08000000
#define PSA_GrantedFeature28		0x10000000
#define PSA_GrantedFeature29		0x20000000
#define PSA_GrantedFeature30		0x40000000
#define PSA_GrantedFeature31		0x80000000

//
//	Description:
//		Get a set of features granted by license (bit mask).
//		For example, this function can return the value	*features = 9,
//		i.e. ( PSA_GrantedFeature0 | PSA_GrantedFeature3 ).
//		This function returns *features = 0 for demo mode (if demo mode has
//		been enabled).
//
//	Input:
//		features		- buffer for feature set
//
//	Output:
//		*features		- feature set
//		Return value	- PSC_STATUS_SUCCESS or error code
//
//	Registry keys for debugging:
//		"FeatureSetGrantedByLicense" of type REG_DWORD (initialized at
//		loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetFeaturesGrantedByLicense(
	unsigned __int32 *features );

//
//	Description:
//		Disable features granted by license for limitation of application
//		functionality "on the fly" e.g. after expiration of license (only
//		enabled features will be disabled, so, 0xFFFFFFFF is valid argument
//		for disabling of all features).
//
//	Input:
//		features		- buffer for feature set mask
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_DisableFeaturesGrantedByLicense(
	unsigned __int32 features );

//
//	Description:
//		Check rights granted by license and display error dialog on error.
//		This function works only in SDK mode. In normal protected application
//		is does nothing.
//
//	Input:
//		features		- features mask to check (the check succeed if
//			at least one bit from the mask is set in current license)
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if the check succeeds or fails
//			or error code on internal error
//
unsigned __int32 PSAPI PSA_CheckFeaturesGrantedByLicense(
	unsigned __int32 features );

#endif

//
//	Program start mode
//

#ifdef PS_USE_LICENSES

//
//	Description:
//		Check if the application is running in demo mode.
//
//	Input:
//		isDemoMode		- buffer for demo mode flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*isDemoMode		- demo mode flag
//
//	Registry keys for debugging:
//		"IsDemoMode" of type REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_IsDemoMode(
	bool *isDemoMode );

//
//	Description:
//		Check if the application is running in trial mode.
//
//	Input:
//		isTrialMode		- buffer for trial mode flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*isTrialMode	- trial mode flag
//
//	Registry keys for debugging:
//		"IsTrialMode" of type REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_IsTrialMode(
	bool *isTrialMode );

#endif

//
//	Expiration parameters of license
//

#ifdef PS_USE_LICENSES

//
//	Description:
//		Get license creation time
//
//	Input:
//		licenseCreationDateTime		- buffer for time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseCreationDateTime	- license creation time in 100 ns intervals
//
//	Registry keys for debugging:
//		"LicenseCreationTime" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseCreationDateTime(
	unsigned __int64 *licenseCreationDateTime );

//
//	Description:
//		Get license start time
//
//	Input:
//		licenseStartDateTime		- buffer for time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseStartDateTime		- license creation time in 100 ns intervals
//
//	Registry keys for debugging:
//		"LicenseStartDateTime" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseStartDateTime(
	unsigned __int64 *licenseStartDateTime );

//
//	Description:
//		Check if the license is already expired.
//
//	Input:
//		isLicenseExpired	- buffer for license expired flag
//		updateRunTimeData	- update total execution time (can be used to update execution 
//							time as frequently as need by calling this method)
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*isLicenseExpired	- license expired flag
//
//	Registry keys for debugging:
//		"IsLicenseExpired" of type REG_DWORD (reinitialized at each call).
//
unsigned __int32 PSAPI PSA_IsLicenseExpired(
	bool *isLicenseExpired, bool updateRunTimeData );

//
//	Description:
//		Get the time before expiration of license.
//
//	Input:
//		timeToLicenseExpiration		- buffer for time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*timeToLicenseExpiration	- time before expiration of license in
//			100 ns intervals (0 - license expired, ~0ui64 - undefined or
//			infinite)
//
//	Registry keys for debugging:
//		"TimeToLicenseExpiration" of type REG_BINARY and length 8 bytes
//		(reinitialized at each call).
//
unsigned __int32 PSAPI PSA_GetTimeToLicenseExpiration(
	unsigned __int64 *timeToLicenseExpiration );

//
//	Description:
//		Get date and time of license expiration.
//
//	Input:
//		licenseExpirationDateTime	- buffer for date and time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseExpirationDateTime	- date and time of license expiration in
//			file time format, i.e. number of 100 ns intervals elapsed since
//			January 1, 1601 (~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"LicenseExpirationDateTime" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseExpirationDateTime(
	unsigned __int64 *licenseExpirationDateTime );

//
//	Description:
//		Get life time limit of license (i.e. time before expiration of license
//		from the moment of license creation, as assigned by e.g. activation
//		key).
//
//	Input:
//		licenseLifeTimeLimit	- buffer for life time limit
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*licenseLifeTimeLimit	- life time limit in 100 ns intervals
//			(~0ui64 - undefined or infinite).
//
//	Registry keys for debugging:
//		"LicenseLifeTimeLimit" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseLifeTimeLimit(
	unsigned __int64 *licenseLifeTimeLimit );

//
//	Description:
//		Get remaining number of runs.
//
//	Input:
//		remainingNumberOfRuns	- buffer for remaining number of runs
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*remainingNumberOfRuns	- remaining number of runs (~0ui32 - undefined
//			or infinite)
//
//	Registry keys for debugging:
//		"RemainingNumberOfRuns" of type REG_DWORD (initialized at loading of
//		protect.dll).
//
unsigned __int32 PSAPI PSA_GetRemainingNumberOfRuns(
	unsigned __int32 *remainingNumberOfRuns );

//
//	Description:
//		Get limit for number of runs (i.e. total allowed number of runs, as
//		assigned by e.g. activation key).
//
//	Input:
//		remainingNumberOfRuns	- buffer for limit of number of runs
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*remainingNumberOfRuns	- limit of number of runs (~0ui32 - undefined
//			or infinite)
//
//	Registry keys for debugging:
//		"LicenseNumberOfRunsLimit" of type REG_DWORD (initialized at loading of
//		protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseNumberOfRunsLimit(
	unsigned __int32 *licenseNumberOfRunsLimit );

//
//	Description:
//		Get remaining execution time of application, calculated in the current
//		moment.
//
//	Input:
//		remainingExecutionTime	- buffer for remaining execution time
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*remainingExecutionTime	- remaining execution time in 100 ns intervals
//			(0 - license expired, ~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"RemainingExecutionTime" of type REG_BINARY and length 8 bytes
//		(reinitialized at each call).
//
unsigned __int32 PSAPI PSA_GetRemainingExecutionTime(
	unsigned __int64 *remainingExecutionTime );

//
//	Description:
//		Get remaining execution time of application, calculated in the moment
//		of start of application.
//
//	Input:
//		remainingExecutinTimeAtStart	- buffer for remaining execution time
//
//	Output:
//		Return value					- PSC_STATUS_SUCCESS or error code
//		*remainingExecutinTimeAtStart	- remaining execution time in 100 ns
//			intervals (0 - license expired, ~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"RemainingExecutionTimeAtStart" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetRemainingExecutionTimeAtStart(
	unsigned __int64 *remainingExecutinTimeAtStart );

//
//	Description:
//		Get limit for execution time of application(i.e. total allowed
//		execution time assigned by e.g. activation key).
//
//	Input:
//		licenseExecutionTimeLimit	- buffer for limit of execution time
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//		*licenseExecutionTimeLimit	- limit of execution time in 100 ns
//			intervals (~0ui64 - undefined or infinite)
//
//	Registry keys for debugging:
//		"LicenseExecutionTimeLimit" of type REG_BINARY and length 8 bytes
//		(initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetLicenseExecutionTimeLimit(
	unsigned __int64 *licenseExecutionTimeLimit );


//
//	Description:
//		Check if the license need confrimation.
//
//	Input:
//		isneedConfirmation	- buffer result flag flag
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*isneedConfirmation	- output flag
//
unsigned __int32 PSAPI PSA_IsLicenseNeedConfirmation(
	bool *isNeedConfirmation );

//
//	Description:
//		Returns time of license confrimation.
//
//	Input:
//		licenseConfirmationTime	- buffer for confirmation time
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*licenseConfirmationTime	- output buffer
//
unsigned __int32 PSAPI PSA_GetLicenseConfirmationTime(
	unsigned __int64 *licenseConfirmationTime );

//
//	Description:
//		Returns time remaining to license confrimation.
//
//	Input:
//		timeToLicenseConfirmation	- buffer for remaining confirmation time
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*timeToLicenseConfirmation	- output buffer
//
unsigned __int32 PSAPI PSA_GetTimeRemainingToLicenseConfirmation(
	unsigned __int64 *timeToLicenseConfirmation );

//
//	Description:
//		Returns license confrimation time limit.
//
//	Input:
//		licenseConfirmationTimeLimit	- buffer for license confrimation time limit
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*licenseConfirmationTime	- output buffer
//
unsigned __int32 PSAPI PSA_GetLicenseConfirmationTimeLimit(
	unsigned __int64 *licenseConfirmationTimeLimit );

#endif

//
//	Miscellaneous data in the key
//

#ifdef PS_USE_LICENSES

//
//	Description:
//		Get user-defined field.
//
//	Input:
//		userDefinedField	- buffer for user-defined field
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS or error code
//		*userDefinedField	- user-defined field (0xFFFF if undefined)
//
//	Registry keys for debugging:
//		"UserDefinedField16Bits" of type REG_DWORD (initialized at loading
//		of protect.dll).
//
unsigned __int32 PSAPI PSA_GetUserDefinedField16Bits(
	unsigned __int16 *userDefinedField );

//
//	Description:
//		Get number of connections.
//
//	Input:
//		numberOfConnections		- buffer for user-defined field
//
//	Output:
//		Return value			- PSC_STATUS_SUCCESS or error code
//		*numberOfConnections	- number of connections (~0ui32 if undefined)
//
//	Registry keys for debugging:
//		"NumberOfConnections" of type REG_DWORD (initialized at loading
//		of protect.dll).
//
unsigned __int32 PSAPI PSA_GetNumberOfConnections(
	unsigned __int32 *numberOfConnections );


//
//	Description:
//		Check if license is activated as trial.
//
//	Input:
//		licenseIsActivatedAsTrial		- buffer for license trial mode flag
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS or error code
//		*licenseIsActivatedAsTrial	- license trial mode flag
//
//	Registry keys for debugging:
//		"LicenseIsActivatedAsTrial" of type REG_DWORD (initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_IsLicenseActivatedAsTrial(
	bool *licenseIsActivatedAsTrial );

#endif

//
//	Specific functions for disc binding
//

#ifdef BINDING_DISC

//	Description:
//		Get the label of disc with that the check was passed.
//
//	Input:
//		labelBuffer					- buffer for disc label
//		labelBufferSizeInWideChars	- buffer size
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//		*labelBuffer				- label (Unicode zero-terminated string)
//		*labelBufferSizeInWideChars	- used buffer size (or required buffer
//			size is return value is PSC_STATUS_BUFFER_TOO_SMALL)
//
//	Registry keys for debugging:
//		"DiscLabel" of type REG_SZ (initialized at loading of protect.dll).
//
unsigned __int32 PSAPI PSA_GetDiscLabel(
	wchar_t *labelBuffer,
	size_t *labelBufferSizeInWideChars );

#endif

// 
//	Specific functions for external binding
// 

#ifdef PS_EXTERNAL_BASED_INITIALIZATION_SUPPORTED

//
//	Description:
//		Set external binding check success flag. By default flag 
//		is cleared.
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_ExternalBindingCheckSetSucceedFlag();

//
//	Description:
//		Clear external binding check success flag. By default flag 
//		is cleared.
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_ExternalBindingCheckSetFailedFlag();

#endif

//
//	Crypted traffic API
//

#ifdef PS_SUPPORT_CRYPTED_TRAFFIC

// Public RSA key
struct PSA_CryptedTrafficKey
{
	size_t KeySizeInBytes;			// Size of RSA key (current implementation
									// support only 128-byte or 256-byte keys)
	unsigned char *Modulus;					// Little-endian, size is KeySizeInBytes
	unsigned char *Exponent;					// Public exponent, little-endian, size is
									// KeySizeInBytes
};

//
//  Description:
//		Open strem of crypted traffic. The function creates initialization
//		block that should be sent to the remote server as first portion of
//		data.
//
//  Input:
//		randomSeed				    - random seed for session key (can be NULL)
//      randomSeedSize				- size of random seed in bytes (can be 0)
//		key							- public key structure to encrypt
//			initialization block
//		initializationBlock			- initialization block buffer
//		initializationBlockSize		- size of buffer
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//  	streamHandle				- stream handle
//		initializationBlockSize		- really used (or required, if return value
//			is PSC_STATUS_BUFFER_TOO_SMALL) size of initialization block
//
//	Note:
//		1.	If randomSeed is NULL or randomSeedSize is 0, the session key will be
//			initialized from timer.
//		2. 	Multiple streams are not supported in current implementation.
//
unsigned __int32 PSAPI PSA_CryptedTrafficOpen(
	const char *randomSeed,
	size_t randomSeedSize,
	PSA_CryptedTrafficKey *key,
	void** streamHandle,
	char *initializationBlock,
	size_t *initializationBlockSize);

//
//  Description:
//		Encrypt byte sequence.
//
//  Input:
//		streamHandle				- stream handle to encrypt bytes for
//      inputData					- input data buffer
//		outputData					- output data buffer
//		dataSize					- length of data in bytes
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_CryptedTrafficEncrypt(
	void *streamHandle,
	char *inputData,
	char *outputData,
	size_t dataSize);

//
//  Description:
//		Decrypt byte sequence.
//
//  Input:
//		streamHandle				- stream handle to decrypt bytes for
//      inputData					- input data buffer
//		outputData					- output data buffer
//		dataSize					- length of data in bytes
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_CryptedTrafficDecrypt(
	void *streamHandle,
	char *inputData,
	char *outputData,
	size_t dataSize);

//
//	Description:
//		Close stream of crypted traffic.
//
//  Input:
//		streamHandle				- stream handle to close
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_CryptedTrafficClose(
	void *streamHandle );

	
#endif

//
//	Additional checks
//

#ifdef PS_SUPPORT_FILE_CHECK_API

//  Description:
//		Return result of integrity checks of loaded files.
//
//  Input:
//		fileCheckResultOk 			- pointer to output variable set to true if
//			all of protected files loaded not corrupted set to false if hash
//			check for one or more files failed
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_GetCheckFilesHashResult( 
	bool *fileCheckResultOk );
#endif

#ifdef PS_SUPPORT_MEMORY_CHECK_API
//
//  Description:
//		Check read-only memory regions of protected modules, calculates hash
//		and compare to hash value stored in protection library
//
//  Input:
//		memCheckResultOk 			- pointer to output variable, set to true
//			if read only memory for all protected modules remains unchanged,
//			set to false if memory changed for one or more modules
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//
unsigned __int32 PSAPI PSA_CheckProtectedModulesReadOnlyMem( 	
	bool *memCheckResultOk );
unsigned __int32 PSAPI PSA_CheckProtectedModulesReadOnlyMemEx( 	
	bool *memCheckResultOk,
	float percent );
#endif

#ifdef DETECT_SUSPICIOUS_VECTORED_EXCEPTIONS
//
//  Description:
//		Check suspicious exceptions flag
//
//  Input:
//		suspiciousVehResultOk 		- pointer to output variable, set to true
//			if no suspicious exceptions occurred,
//			set to false if one or more suspicious exceptions were detected 
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS
//
unsigned __int32 PSAPI PSA_CheckSuspiciousVectoredExceptions( 
	bool *suspiciousVehResultOk );	
#endif

#ifdef PS_SUPPORT_CERTIFICATE_CHECK

//
//	Description:
//		Generate certificate request packet for sending to the server.
//
//	Input:
//		requestBuffer	 	- buffer for request
//		requestBufferSize	- size of buffer in bytes
//
//	Output:
//		Return value				- PSC_STATUS_SUCCESS or error code
//			(PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small)
//		*requestBuffer				- certificate request
//		*requestBufferSize			- used buffer size in bytes (or required
//			buffer size if return value is PSC_STATUS_BUFFER_TOO_SMALL)
//
unsigned __int32 PSAPI PSA_CertificateGenerateRequest(
	char *requestBuffer,
	size_t *requestBufferSize );

//
//	Description:
//		Validate certificate sent from server.
//
//	Input:
//		responseBuffer				- buffer with response from the server
//		responseBufferSize			- size of buffer in bytes
//
//	Output:
//		returnValue					- PSC_STATUS_SUCCESS of error code
//			(PSC_STATUS_INVALID_PARAMETER if arguments are invalid,
//			PSC_STATUS_CERTIFICATE_INVALID_FORMAT
//				if format of certificate is invalid or validation is failed,
//			PSC_STATUS_CERTIFICATE_NOT_VALID_YET
//				if validity period of certificate is in future,
//			PSC_STATUS_CERTIFICATE_NOT_VALID_ALREADY
//				if validity period of certificate is in past )
//
unsigned __int32 PSAPI PSA_CertificateValidate(
	char *responseBuffer,
	size_t responseBufferSize );

#endif

//
// File System API
//

#ifdef PS_FILE_SYSTEM_USER_MODE

// File position moving origin definition.
#define PSA_FS_SEEK_SET	0
#define PSA_FS_SEEK_CUR	1
#define PSA_FS_SEEK_END	2

//	Description:
//		Open a protected file.
//
//	Input:
//		fileName		- File name to open.
//		fileHandle		- Pointer to output handle of opened file if call succeed.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 PSAPI PSA_FsOpenFile(
	const wchar_t *fileName,
	void **fileHandle );

//	Description:
//		Close a protected file.
//
//	Input:
//		fileHandle		- File handle.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 PSAPI PSA_FsCloseFile(
	void *fileHandle );

//	Description:
//		Retrieve size of the specified protected file.
//
//	Input:
//		fileHandle		- File handle.
//		fileSize		- Pointer to a variable that receives the file size.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 PSAPI PSA_FsGetFileSize(
	void *fileHandle,
	__int64 *fileSize );

//	Description:
//		Move file position of the specified protected file.
//
//	Input:
//		fileHandle		- File handle.
//		origin			- Starting point for the file position move.
//						  This parameter can be one of the following values:
//						    PSA_FS_SEEK_SET - Starting point is the beginning of the file.
//						    PSA_FS_SEEK_CUR - Starting point is the current value of the file position.
//						    PSA_FS_SEEK_END - Starting point is the current end-of-file position.
//		offset			- Distance to move file position from the origin.
//		newOffset		- Pointer to a variable that receives new file position. Can be null.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 PSAPI PSA_FsSetFilePosition(
	void *fileHandle,
	unsigned __int32 origin,
	__int64 offset,
	__int64 *newOffset );

//	Description:
//		Read data from the specified protected file starting at the current file position.
//
//	Input:
//		fileHandle			- File handle.
//		buffer				- Pointer to a buffer that receives the data.
//		numberOfBytesToRead	- Maximum number of bytes to be read.
//		numberOfBytesRead	- Pointer to a variable that receives number of bytes actually read. Can be null.
//
//	Output:
//		Return value		- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 PSAPI PSA_FsReadFile(
	void *fileHandle,
	void *buffer,
	size_t numberOfBytesToRead,
	size_t *numberOfBytesRead );

//	Description:
//		Verify digital signature of the specified real file.
//
//	Input:
//		fileName		- File name.
//		valid			- Pointer to a variable that receives result of verification.
//							Nonzero if digital signature of the file is valid, zero if invalid.
//
//	Output:
//		Return value	- PSC_STATUS_SUCCESS if success, other PSC_STATUS code if failure.
//
unsigned __int32 PSAPI PSA_FsVerifyFileSignature(
	const wchar_t *fileName,
	int *valid );

#endif

#ifdef OPTION_ENABLE_EMBEDDED_USER_DATA

//
// Embedded data files API
//

//  Description:
//		Get embedded data block from protection library
//	Input:
//		blockId 		- id of block to get, id must be in range 0..63
//		data			- pointer to data buffer
//		dataSize		- on input contains size of data buffer, on output size of data written to buffer,
//						if need to get block size pass 0
//	Output:	
//		return value 	- PSC_STATUS_SUCCESS if id is in allowed range, and data buffer is big enough, data is copied to output buffer
//						- PSC_STATUS_UNSUCCESSFUL if id is not in allowed range
//						- PSC_STATUS_BUFFER_TOO_SMALL if buffer is not big enough, dataSize contains size of buffer needed
//						- PSC_STATUS_INVALID_PARAMETER if dataSize or data is null pointer
//						or other error code

unsigned __int32 PSAPI PSA_GetEmbeddedDataBlock( 
	unsigned __int32 blockId, 
	char *data, 
	size_t *dataSize );
#endif

// MMOG options support

#ifdef OPTION_ENABLE_CLIENT_VALIDATION

//  Description:
//		Calculate hash on input buffer
//	Input:
//		input 	- buffer with input data, must have size PSA_VALIDATE_CLIENT_BUFFER_SIZE 
//		output	- pointer to buffer for hash calculated on input buffer, must be at least PSA_VALIDATE_CLIENT_BUFFER_SIZE
//
//	Output:	
//		return value 	- PSC_STATUS_SUCCESS or error code


unsigned __int32 PSAPI PSA_ValidateClient(
	char* input,
	char* output );
	
#endif

#ifdef PS_SUPPORT_HARDWARE_CODE_API

//  Description:
//      Generate the hardware code
///
//  Note:
//      The hardware code is a binary data, not a string. Data size may vary between versions.
//
//  Input:
//      hardwareCodeBuffer          - buffer for storing the hardware code (may be null)
//      hardwareCodeBufferSize      - pointer to variable that holds size of code buffer
//
//  Output:
//      Return value                - PSC_STATUS_SUCCESS or error code ( PSC_STATUS_BUFFER_TOO_SMALL if buffer is too small )
//      *hardwareCodeBuffer         - hardware code
//      *hardwareCodeBufferSize     - used buffer size ( or required buffer size if return value is PSC_STATUS_BUFFER_TOO_SMALL)
unsigned __int32 PSAPI PSA_GetHardwareCode(
	unsigned char* hardwareCodeBuffer,
	unsigned __int32* hardwareCodeBufferSize );

#endif

#ifdef OPTION_ENABLE_SYSTEM_LIBS_LOCATION_CHECK
//  Description:
//		Function performs check that system libraries(list of libraries is defined in protection options) are located in windows system catalog.
//		To get only fact of system libraries replacement call PSA_CheckSystemLibsLocation( null, null, &systemLibLocationChanged )
//		To get full paths to replaced system libraries pass also valid outBuffer and outBufferSizePtr parameters
//	Input:
//		outBuffer 		- 	Buffer that will contain check result - list of wide characters strings separated by zero wide character, each
//							string is full path to library( including module name ) that is not located in system catalog.
//							If outBuffer is null and outBufferSizePtr is not null, value of outBufferSizePtr will contain necessary buffer size on exit.
//		outBufferSizePtr	-	Pointer to size of outBuffer array, on input contains size of array, 
//								after function returns contains used buffer size.
//								If outBufferSizePtr is null, result is returned in systemLibLocationChangedPtr only.
//		systemLibLocationChangedPtr	-  	Pointer to boolean var that will contain check result. Must not be null.
//										Contains true on exit if one of system libraries( defined in protection options )
//										is located outside of windows system directory. Contains false otherwise. 
//	Output:	
//		return value 	- PSC_STATUS_SUCCESS if function performed successfully
//						- PSC_STATUS_BUFFER_TOO_SMALL if outBuffer is not big enough to save result, outBufferSizePtr will contain size of buffer needed, 
//							value of systemLibLocationChangedPtr is valid in this case
//						- PSC_STATUS_INVALID_PARAMETER if systemLibLocationChangedPtr is null
//						- PSC_STATUS_ERROR_IN_WINAPI if one of modules is not loaded or winapi error
//						- other errors
unsigned __int32 PSAPI PSA_CheckSystemLibsLocation(
	char* outBuffer,
	size_t* outBufferSizePtr,
	bool* systemLibLocationChangedPtr );
#endif

#ifdef OPTION_ENABLE_SYSTEM_LIBS_IAT_CHECK

//  Description:
//		Function performs check that IAT in system libraries(list of libraries is defined in protection options) are not modified
//		To get only fact of IAT modification call PSA_CheckSystemLibsIat( null, null, &systemLibIatModifiedPtr )
//		To get full info on IAT modifications found, pass also valid outBuffer and outBufferSize parameters
//	Input:
//		outBuffer 		- 	Buffer that will contain check result - format of result info is following:
//							
//								UInt16 NumberOfDllsWithIatModified -  16 bit value, number of ModifiedDllInfo structures 
//								followed by sequence of ModifiedDllInfo structure, number of elements in sequence is NumberOfDllsWithIatModified
//								
//								where each ModifiedDllInfo structure is serialized as followed:
//									struct
//									{
//										WideChar* NameOfDllWithModifiedIAT;					// Zero terminated wide string, name of library with IAT modified
//										UInt16 NumberOfIatModifications; 					// 16 bit value, number of modifications found in IAT
//										ModifiedIatEntryInfo[ NumberOfIatModifications ]	// array of of ModifiedIatEntryInfo structures, size is NumberOfIatModifications
//									}ModifiedDllInfo;
//
//									where ModifiedIatEntryInfo structure has following format:
//									struct
//									{
//										WideChar*	ImportedDllName;				// Zero terminated wide string, name of library, function imported from it was patched
//										UInt8		FuncIsImportedByOrdinal;		// 1 byte value, if not 0 indicates that modified entry in IAT was imported by ordinal 
//										// if FuncIsImportedByOrdinal == 0 next follows 
//										WideChar*	ImportedFunctionName;			// Zero terminated wide string, name of function that was pathced in IAT
//										// if FuncIsImportedByOrdinal != 0 next follows
//										UInt16		Ordinal						// 16 bit value, ordinal of function 
//									}ModifiedIatEntryInfo;
//									
//							If outBuffer is null and outBufferSize is not null, outBufferSize will contain necessary buffer size on exit.
//		outBufferSizePtr	-	Pointer to size of outBuffer array, on input contains size of array, after function returns contains used buffer size.
//								If outBufferSize is null, result is returned in systemLibIatModifiedPtr only.
//		systemLibIatModifiedPtr	-  	Pointer to boolean var that will contain check result. Must not be null.
//										Contains true on exit if IAT is modifies in one of system libraries(defined in protection options).
//										Contains false otherwise. 
//	Output:	
//		return value 	- PSC_STATUS_SUCCESS if function performed successfully
//						- PSC_STATUS_BUFFER_TOO_SMALL if outBuffer is not big enough to save result, outBufferSize will contain size of buffer needed, 
//							value of systemLibIatModified is valid in this case
//						- PSC_STATUS_INVALID_PARAMETER if systemLibIatModifiedPtr is null
//						- PSC_STATUS_ERROR_IN_WINAPI if one of modules is not loaded or winapi error
//						- other errors 
unsigned __int32 PSAPI PSA_CheckSystemLibsIat(
	char* outBuffer,
	size_t* outBufferSizePtr,
	bool* systemLibIatModifiedPtr );

#endif
	
#ifdef OPTION_ENABLE_SYSTEM_LIBS_CODE_SECTION_CHECK

//  Description:
//		Function performs check that read only sections are not modified in system DLLs( list of DLLs is defined in protection options )
//		To get only fact of sections modifications call PSA_CheckSystemLibsReadOnlySections( null, null, &readOnlySectionsModified )
//		To get full information on modified regions pass also valid outBuffer and outBufferSizePtr parameters
//	Input:
//		outBuffer 		- 	Buffer that will contain check result - serialized array of LibraryWithModifiedReadOnlySectionInfo structures 
// 							Format of output buffer is:
//
// 								UInt16 	NumLibsWithSectionsModified - 16 bit value, number of libraries with modified read only sections found
//								followed by sequence of LibraryWithModifiedReadOnlySectionInfo structures, 
//								number of elements in sequence is NumLibsWithSectionsModified
//								where each structure LibraryWithModifiedReadOnlySectionInfo is serialized as followed
//
// 									struct
// 									{
// 										WideChar* 	LibraryName; 			// Zero terminated wide char string, library name
//										UInt32		FileVersionLow;		// 32 bit value, file version low part
//										UInt32		FileVersionHigh;		// 32 bit value, file version high part
// 										UInt32		NumRegions;			// 32 bit value, size of modifications array that follows
//										ModifiedRegion[ NumRegions ];	// array of ModifiedRegion structures, size of array is NumRegions
// 									}
// 									LibraryWithModifiedReadOnlySectionInfo;
//
//									where each structure ModifiedRegion is serialized as followed
//
// 									struct
// 									{
//										UInt32 	RegionRva;  	// 32 bit value - rva of modified region
//										UInt32 	RegionSize;	// 32 bit value - size of modified region
// 									}
// 									ModifiedRegion;
//
//							If outBuffer is null and outBufferSizePtr is not null, outBufferSizePtr will contain necessary buffer size on exit.
//		outBufferSizePtr 	-	Pointer to size of outBuffer array, on input contains size of array, after function returns contains used buffer size.
//							If outBufferSizePtr is null, result is returned in readOnlySectionsModifiedPtr only.
//		readOnlySectionsModifiedPtr	-  	Pointer to boolean var that will contain check result. Must not be null.
//										Contains true on exit if read only sections are modified in one of system libraries(defined in protection options).
//										Contains false otherwise. 
//	Output:	
//		return value 	- PSC_STATUS_SUCCESS if function performed successfully
//						- PSC_STATUS_BUFFER_TOO_SMALL if outBuffer is not big enough to save result, outBufferSizePtr will contain size of buffer needed
//						- PSC_STATUS_INVALID_PARAMETER if readOnlySectionsModifiedPtr is null
//						- other errors 	
unsigned __int32 PSAPI PSA_CheckSystemLibsReadOnlySections(
	char* outBuffer,
	size_t* outBufferSizePtr,
	bool* readOnlySectionsModifiedPtr );
	
#endif

#ifdef PS_MQL4_PROTECT

//  Description:
//		Function performs activation to mql4 script protection
//	Input:
//		accountNumber - account number provided by script
//	Output:	
//		return value - PSC_STATUS_SUCCESS - if activation successfully finished
//		- error codes
__int32 PSAPI PSA_InfoProperty( __int32 accountNumber ); 

#endif

// Protected classes

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt32_1ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_1CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt32_1
{
private:
	unsigned int m_value;

public:
	inline PsProtUInt32_1()
	{
		PSA_PsProtUInt32_1AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt32_1( unsigned int value )
	{
		PSA_PsProtUInt32_1AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtUInt32_1( const PsProtUInt32_1 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int() const
	{
		unsigned int result;
		PSA_PsProtUInt32_1ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline unsigned int Value() const
	{
		unsigned int result;
		PSA_PsProtUInt32_1ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline PsProtUInt32_1 &operator = ( unsigned int value )
	{
		PSA_PsProtUInt32_1AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator = ( const PsProtUInt32_1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt32_1 operator + ()
	{
		return *this;
	}

	inline PsProtUInt32_1 operator - ()
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator ~ ()
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator ++ ()
	{
		PSA_PsProtUInt32_1AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator ++ ( int )
	{
		PsProtUInt32_1 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_1AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator -- ()
	{
		PSA_PsProtUInt32_1SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator -- ( int )
	{
		PsProtUInt32_1 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_1SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator + ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator + ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator + ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator += ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator += ( unsigned int value )
	{
		PSA_PsProtUInt32_1AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator - ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator - ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator - ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator -= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator -= ( unsigned int value )
	{
		PSA_PsProtUInt32_1SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator * ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator * ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator * ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator *= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator *= ( unsigned int value )
	{
		PSA_PsProtUInt32_1MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator / ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator / ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator / ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator /= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator /= ( unsigned int value )
	{
		PSA_PsProtUInt32_1DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator % ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator % ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator % ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator %= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator %= ( unsigned int value )
	{
		PSA_PsProtUInt32_1RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator << ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator << ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator << ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator <<= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator <<= ( unsigned int value )
	{
		PSA_PsProtUInt32_1ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator >> ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator >> ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator >> ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator >>= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator >>= ( unsigned int value )
	{
		PSA_PsProtUInt32_1ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator & ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator & ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator & ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator &= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator &= ( unsigned int value )
	{
		PSA_PsProtUInt32_1AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator | ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator | ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator | ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator |= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator |= ( unsigned int value )
	{
		PSA_PsProtUInt32_1OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 operator ^ ( const PsProtUInt32_1 & value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 operator ^ ( unsigned int value )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_1 operator ^ ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		PsProtUInt32_1 temp;
		PSA_PsProtUInt32_1XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_1 &operator ^= ( PsProtUInt32_1 value )
	{
		PSA_PsProtUInt32_1XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_1 &operator ^= ( unsigned int value )
	{
		PSA_PsProtUInt32_1XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt32_1 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt32_1 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned int value0, const PsProtUInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_1CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt32_2ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_2CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt32_2
{
private:
	unsigned int m_value;

public:
	inline PsProtUInt32_2()
	{
		PSA_PsProtUInt32_2AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt32_2( unsigned int value )
	{
		PSA_PsProtUInt32_2AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtUInt32_2( const PsProtUInt32_2 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int() const
	{
		unsigned int result;
		PSA_PsProtUInt32_2ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline unsigned int Value() const
	{
		unsigned int result;
		PSA_PsProtUInt32_2ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline PsProtUInt32_2 &operator = ( unsigned int value )
	{
		PSA_PsProtUInt32_2AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator = ( const PsProtUInt32_2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt32_2 operator + ()
	{
		return *this;
	}

	inline PsProtUInt32_2 operator - ()
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator ~ ()
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator ++ ()
	{
		PSA_PsProtUInt32_2AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator ++ ( int )
	{
		PsProtUInt32_2 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_2AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator -- ()
	{
		PSA_PsProtUInt32_2SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator -- ( int )
	{
		PsProtUInt32_2 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_2SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator + ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator + ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator + ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator += ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator += ( unsigned int value )
	{
		PSA_PsProtUInt32_2AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator - ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator - ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator - ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator -= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator -= ( unsigned int value )
	{
		PSA_PsProtUInt32_2SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator * ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator * ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator * ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator *= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator *= ( unsigned int value )
	{
		PSA_PsProtUInt32_2MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator / ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator / ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator / ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator /= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator /= ( unsigned int value )
	{
		PSA_PsProtUInt32_2DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator % ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator % ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator % ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator %= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator %= ( unsigned int value )
	{
		PSA_PsProtUInt32_2RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator << ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator << ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator << ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator <<= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator <<= ( unsigned int value )
	{
		PSA_PsProtUInt32_2ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator >> ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator >> ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator >> ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator >>= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator >>= ( unsigned int value )
	{
		PSA_PsProtUInt32_2ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator & ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator & ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator & ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator &= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator &= ( unsigned int value )
	{
		PSA_PsProtUInt32_2AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator | ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator | ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator | ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator |= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator |= ( unsigned int value )
	{
		PSA_PsProtUInt32_2OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 operator ^ ( const PsProtUInt32_2 & value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 operator ^ ( unsigned int value )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_2 operator ^ ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		PsProtUInt32_2 temp;
		PSA_PsProtUInt32_2XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_2 &operator ^= ( PsProtUInt32_2 value )
	{
		PSA_PsProtUInt32_2XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_2 &operator ^= ( unsigned int value )
	{
		PSA_PsProtUInt32_2XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt32_2 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt32_2 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned int value0, const PsProtUInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_2CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt32_3ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_3CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt32_3
{
private:
	unsigned int m_value;

public:
	inline PsProtUInt32_3()
	{
		PSA_PsProtUInt32_3AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt32_3( unsigned int value )
	{
		PSA_PsProtUInt32_3AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtUInt32_3( const PsProtUInt32_3 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int() const
	{
		unsigned int result;
		PSA_PsProtUInt32_3ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline unsigned int Value() const
	{
		unsigned int result;
		PSA_PsProtUInt32_3ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline PsProtUInt32_3 &operator = ( unsigned int value )
	{
		PSA_PsProtUInt32_3AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator = ( const PsProtUInt32_3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt32_3 operator + ()
	{
		return *this;
	}

	inline PsProtUInt32_3 operator - ()
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator ~ ()
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator ++ ()
	{
		PSA_PsProtUInt32_3AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator ++ ( int )
	{
		PsProtUInt32_3 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_3AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator -- ()
	{
		PSA_PsProtUInt32_3SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator -- ( int )
	{
		PsProtUInt32_3 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_3SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator + ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator + ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator + ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator += ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator += ( unsigned int value )
	{
		PSA_PsProtUInt32_3AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator - ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator - ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator - ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator -= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator -= ( unsigned int value )
	{
		PSA_PsProtUInt32_3SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator * ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator * ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator * ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator *= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator *= ( unsigned int value )
	{
		PSA_PsProtUInt32_3MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator / ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator / ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator / ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator /= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator /= ( unsigned int value )
	{
		PSA_PsProtUInt32_3DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator % ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator % ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator % ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator %= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator %= ( unsigned int value )
	{
		PSA_PsProtUInt32_3RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator << ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator << ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator << ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator <<= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator <<= ( unsigned int value )
	{
		PSA_PsProtUInt32_3ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator >> ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator >> ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator >> ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator >>= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator >>= ( unsigned int value )
	{
		PSA_PsProtUInt32_3ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator & ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator & ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator & ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator &= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator &= ( unsigned int value )
	{
		PSA_PsProtUInt32_3AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator | ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator | ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator | ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator |= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator |= ( unsigned int value )
	{
		PSA_PsProtUInt32_3OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 operator ^ ( const PsProtUInt32_3 & value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 operator ^ ( unsigned int value )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_3 operator ^ ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		PsProtUInt32_3 temp;
		PSA_PsProtUInt32_3XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_3 &operator ^= ( PsProtUInt32_3 value )
	{
		PSA_PsProtUInt32_3XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_3 &operator ^= ( unsigned int value )
	{
		PSA_PsProtUInt32_3XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt32_3 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt32_3 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned int value0, const PsProtUInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_3CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt32_4ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtUInt32_4CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt32_4
{
private:
	unsigned int m_value;

public:
	inline PsProtUInt32_4()
	{
		PSA_PsProtUInt32_4AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt32_4( unsigned int value )
	{
		PSA_PsProtUInt32_4AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtUInt32_4( const PsProtUInt32_4 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned int() const
	{
		unsigned int result;
		PSA_PsProtUInt32_4ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline unsigned int Value() const
	{
		unsigned int result;
		PSA_PsProtUInt32_4ConvertEX( m_value, 0, result );
		return *( unsigned int* )&result;
	}

	inline PsProtUInt32_4 &operator = ( unsigned int value )
	{
		PSA_PsProtUInt32_4AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator = ( const PsProtUInt32_4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt32_4 operator + ()
	{
		return *this;
	}

	inline PsProtUInt32_4 operator - ()
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator ~ ()
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator ++ ()
	{
		PSA_PsProtUInt32_4AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator ++ ( int )
	{
		PsProtUInt32_4 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_4AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator -- ()
	{
		PSA_PsProtUInt32_4SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator -- ( int )
	{
		PsProtUInt32_4 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt32_4SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator + ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator + ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator + ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator += ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator += ( unsigned int value )
	{
		PSA_PsProtUInt32_4AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator - ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator - ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator - ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator -= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator -= ( unsigned int value )
	{
		PSA_PsProtUInt32_4SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator * ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator * ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator * ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator *= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator *= ( unsigned int value )
	{
		PSA_PsProtUInt32_4MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator / ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator / ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator / ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator /= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator /= ( unsigned int value )
	{
		PSA_PsProtUInt32_4DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator % ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator % ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator % ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator %= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator %= ( unsigned int value )
	{
		PSA_PsProtUInt32_4RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator << ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator << ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator << ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator <<= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator <<= ( unsigned int value )
	{
		PSA_PsProtUInt32_4ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator >> ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator >> ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator >> ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator >>= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator >>= ( unsigned int value )
	{
		PSA_PsProtUInt32_4ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator & ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator & ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator & ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator &= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator &= ( unsigned int value )
	{
		PSA_PsProtUInt32_4AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator | ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator | ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator | ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator |= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator |= ( unsigned int value )
	{
		PSA_PsProtUInt32_4OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 operator ^ ( const PsProtUInt32_4 & value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 operator ^ ( unsigned int value )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt32_4 operator ^ ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		PsProtUInt32_4 temp;
		PSA_PsProtUInt32_4XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt32_4 &operator ^= ( PsProtUInt32_4 value )
	{
		PSA_PsProtUInt32_4XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt32_4 &operator ^= ( unsigned int value )
	{
		PSA_PsProtUInt32_4XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt32_4 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt32_4 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned int value )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned int value0, const PsProtUInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtUInt32_4CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif


// Protected classes

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt64_1ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_1CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt64_1
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtUInt64_1()
	{
		PSA_PsProtUInt64_1AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt64_1( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtUInt64_1( const PsProtUInt64_1 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_1ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline unsigned __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_1ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline PsProtUInt64_1 &operator = ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator = ( const PsProtUInt64_1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt64_1 operator + ()
	{
		return *this;
	}

	inline PsProtUInt64_1 operator - ()
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator ~ ()
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator ++ ()
	{
		PSA_PsProtUInt64_1AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator ++ ( int )
	{
		PsProtUInt64_1 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_1AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator -- ()
	{
		PSA_PsProtUInt64_1SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator -- ( int )
	{
		PsProtUInt64_1 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_1SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator + ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator + ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator + ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator += ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator += ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator - ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator - ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator - ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator -= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator -= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator * ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator * ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator * ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator *= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator *= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator / ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator / ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator / ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator /= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator /= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator % ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator % ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator % ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator %= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator %= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator << ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator << ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator << ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator <<= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator <<= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator >> ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator >> ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator >> ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator >>= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator >>= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator & ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator & ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator & ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator &= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator &= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator | ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator | ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator | ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator |= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator |= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 operator ^ ( const PsProtUInt64_1 & value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 operator ^ ( unsigned __int64 value )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_1 operator ^ ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		PsProtUInt64_1 temp;
		PSA_PsProtUInt64_1XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_1 &operator ^= ( PsProtUInt64_1 value )
	{
		PSA_PsProtUInt64_1XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_1 &operator ^= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_1XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt64_1 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt64_1 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned __int64 value0, const PsProtUInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_1CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt64_2ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_2CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt64_2
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtUInt64_2()
	{
		PSA_PsProtUInt64_2AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt64_2( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtUInt64_2( const PsProtUInt64_2 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_2ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline unsigned __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_2ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline PsProtUInt64_2 &operator = ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator = ( const PsProtUInt64_2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt64_2 operator + ()
	{
		return *this;
	}

	inline PsProtUInt64_2 operator - ()
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator ~ ()
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator ++ ()
	{
		PSA_PsProtUInt64_2AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator ++ ( int )
	{
		PsProtUInt64_2 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_2AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator -- ()
	{
		PSA_PsProtUInt64_2SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator -- ( int )
	{
		PsProtUInt64_2 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_2SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator + ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator + ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator + ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator += ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator += ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator - ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator - ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator - ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator -= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator -= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator * ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator * ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator * ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator *= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator *= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator / ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator / ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator / ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator /= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator /= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator % ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator % ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator % ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator %= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator %= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator << ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator << ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator << ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator <<= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator <<= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator >> ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator >> ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator >> ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator >>= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator >>= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator & ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator & ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator & ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator &= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator &= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator | ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator | ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator | ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator |= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator |= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 operator ^ ( const PsProtUInt64_2 & value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 operator ^ ( unsigned __int64 value )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_2 operator ^ ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		PsProtUInt64_2 temp;
		PSA_PsProtUInt64_2XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_2 &operator ^= ( PsProtUInt64_2 value )
	{
		PSA_PsProtUInt64_2XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_2 &operator ^= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_2XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt64_2 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt64_2 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned __int64 value0, const PsProtUInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_2CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt64_3ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_3CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt64_3
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtUInt64_3()
	{
		PSA_PsProtUInt64_3AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt64_3( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtUInt64_3( const PsProtUInt64_3 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_3ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline unsigned __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_3ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline PsProtUInt64_3 &operator = ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator = ( const PsProtUInt64_3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt64_3 operator + ()
	{
		return *this;
	}

	inline PsProtUInt64_3 operator - ()
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator ~ ()
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator ++ ()
	{
		PSA_PsProtUInt64_3AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator ++ ( int )
	{
		PsProtUInt64_3 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_3AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator -- ()
	{
		PSA_PsProtUInt64_3SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator -- ( int )
	{
		PsProtUInt64_3 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_3SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator + ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator + ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator + ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator += ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator += ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator - ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator - ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator - ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator -= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator -= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator * ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator * ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator * ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator *= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator *= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator / ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator / ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator / ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator /= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator /= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator % ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator % ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator % ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator %= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator %= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator << ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator << ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator << ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator <<= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator <<= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator >> ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator >> ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator >> ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator >>= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator >>= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator & ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator & ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator & ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator &= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator &= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator | ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator | ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator | ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator |= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator |= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 operator ^ ( const PsProtUInt64_3 & value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 operator ^ ( unsigned __int64 value )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_3 operator ^ ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		PsProtUInt64_3 temp;
		PSA_PsProtUInt64_3XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_3 &operator ^= ( PsProtUInt64_3 value )
	{
		PSA_PsProtUInt64_3XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_3 &operator ^= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_3XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt64_3 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt64_3 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned __int64 value0, const PsProtUInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_3CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtUInt64_4ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtUInt64_4CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtUInt64_4
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtUInt64_4()
	{
		PSA_PsProtUInt64_4AssignXN( 0, 0, m_value );
	}

	inline PsProtUInt64_4( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtUInt64_4( const PsProtUInt64_4 &value )
	{
		m_value = value.m_value;
	}

	inline operator unsigned __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_4ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline unsigned __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtUInt64_4ConvertEX( m_value, 0, result );
		return *( unsigned __int64* )&result;
	}

	inline PsProtUInt64_4 &operator = ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator = ( const PsProtUInt64_4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtUInt64_4 operator + ()
	{
		return *this;
	}

	inline PsProtUInt64_4 operator - ()
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator ~ ()
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator ++ ()
	{
		PSA_PsProtUInt64_4AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator ++ ( int )
	{
		PsProtUInt64_4 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_4AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator -- ()
	{
		PSA_PsProtUInt64_4SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator -- ( int )
	{
		PsProtUInt64_4 temp;
		temp.m_value = m_value;
		PSA_PsProtUInt64_4SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator + ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator + ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator + ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator += ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator += ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator - ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator - ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator - ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator -= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator -= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator * ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator * ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator * ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator *= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator *= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator / ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator / ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator / ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator /= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator /= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator % ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator % ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator % ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator %= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator %= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator << ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator << ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator << ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator <<= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator <<= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator >> ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator >> ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator >> ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator >>= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator >>= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator & ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator & ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator & ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator &= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator &= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator | ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator | ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator | ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator |= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator |= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 operator ^ ( const PsProtUInt64_4 & value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 operator ^ ( unsigned __int64 value )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtUInt64_4 operator ^ ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		PsProtUInt64_4 temp;
		PSA_PsProtUInt64_4XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtUInt64_4 &operator ^= ( PsProtUInt64_4 value )
	{
		PSA_PsProtUInt64_4XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtUInt64_4 &operator ^= ( unsigned __int64 value )
	{
		PSA_PsProtUInt64_4XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtUInt64_4 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtUInt64_4 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtUInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtUInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtUInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtUInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( unsigned __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( unsigned __int64 value0, const PsProtUInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtUInt64_4CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif


// Protected classes

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt32_1ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_1CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt32_1
{
private:
	unsigned int m_value;

public:
	inline PsProtInt32_1()
	{
		PSA_PsProtInt32_1AssignXN( 0, 0, m_value );
	}

	inline PsProtInt32_1( int value )
	{
		PSA_PsProtInt32_1AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtInt32_1( const PsProtInt32_1 &value )
	{
		m_value = value.m_value;
	}

	inline operator int() const
	{
		unsigned int result;
		PSA_PsProtInt32_1ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline int Value() const
	{
		unsigned int result;
		PSA_PsProtInt32_1ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline PsProtInt32_1 &operator = ( int value )
	{
		PSA_PsProtInt32_1AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator = ( const PsProtInt32_1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt32_1 operator + ()
	{
		return *this;
	}

	inline PsProtInt32_1 operator - ()
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator ~ ()
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator ++ ()
	{
		PSA_PsProtInt32_1AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator ++ ( int )
	{
		PsProtInt32_1 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_1AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator -- ()
	{
		PSA_PsProtInt32_1SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator -- ( int )
	{
		PsProtInt32_1 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_1SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_1 operator + ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator + ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator + ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator += ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator += ( int value )
	{
		PSA_PsProtInt32_1AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator - ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator - ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator - ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator -= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator -= ( int value )
	{
		PSA_PsProtInt32_1SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator * ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator * ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator * ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator *= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator *= ( int value )
	{
		PSA_PsProtInt32_1MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator / ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator / ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator / ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator /= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator /= ( int value )
	{
		PSA_PsProtInt32_1DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator % ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator % ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator % ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator %= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator %= ( int value )
	{
		PSA_PsProtInt32_1RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator << ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator << ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator << ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator <<= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator <<= ( int value )
	{
		PSA_PsProtInt32_1ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator >> ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator >> ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator >> ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator >>= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator >>= ( int value )
	{
		PSA_PsProtInt32_1ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator & ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator & ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator & ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator &= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator &= ( int value )
	{
		PSA_PsProtInt32_1AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator | ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator | ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator | ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator |= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator |= ( int value )
	{
		PSA_PsProtInt32_1OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_1 operator ^ ( const PsProtInt32_1 & value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 operator ^ ( int value )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_1 operator ^ ( int value0, const PsProtInt32_1 & value1  )
	{
		PsProtInt32_1 temp;
		PSA_PsProtInt32_1XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_1 &operator ^= ( PsProtInt32_1 value )
	{
		PSA_PsProtInt32_1XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_1 &operator ^= ( int value )
	{
		PSA_PsProtInt32_1XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt32_1 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( int value0, const PsProtInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt32_1 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( int value0, const PsProtInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( int value0, const PsProtInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( int value0, const PsProtInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( int value0, const PsProtInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( int value0, const PsProtInt32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_1CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt32_2ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_2CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt32_2
{
private:
	unsigned int m_value;

public:
	inline PsProtInt32_2()
	{
		PSA_PsProtInt32_2AssignXN( 0, 0, m_value );
	}

	inline PsProtInt32_2( int value )
	{
		PSA_PsProtInt32_2AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtInt32_2( const PsProtInt32_2 &value )
	{
		m_value = value.m_value;
	}

	inline operator int() const
	{
		unsigned int result;
		PSA_PsProtInt32_2ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline int Value() const
	{
		unsigned int result;
		PSA_PsProtInt32_2ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline PsProtInt32_2 &operator = ( int value )
	{
		PSA_PsProtInt32_2AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator = ( const PsProtInt32_2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt32_2 operator + ()
	{
		return *this;
	}

	inline PsProtInt32_2 operator - ()
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator ~ ()
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator ++ ()
	{
		PSA_PsProtInt32_2AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator ++ ( int )
	{
		PsProtInt32_2 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_2AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator -- ()
	{
		PSA_PsProtInt32_2SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator -- ( int )
	{
		PsProtInt32_2 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_2SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_2 operator + ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator + ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator + ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator += ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator += ( int value )
	{
		PSA_PsProtInt32_2AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator - ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator - ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator - ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator -= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator -= ( int value )
	{
		PSA_PsProtInt32_2SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator * ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator * ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator * ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator *= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator *= ( int value )
	{
		PSA_PsProtInt32_2MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator / ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator / ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator / ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator /= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator /= ( int value )
	{
		PSA_PsProtInt32_2DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator % ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator % ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator % ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator %= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator %= ( int value )
	{
		PSA_PsProtInt32_2RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator << ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator << ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator << ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator <<= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator <<= ( int value )
	{
		PSA_PsProtInt32_2ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator >> ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator >> ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator >> ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator >>= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator >>= ( int value )
	{
		PSA_PsProtInt32_2ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator & ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator & ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator & ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator &= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator &= ( int value )
	{
		PSA_PsProtInt32_2AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator | ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator | ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator | ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator |= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator |= ( int value )
	{
		PSA_PsProtInt32_2OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_2 operator ^ ( const PsProtInt32_2 & value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 operator ^ ( int value )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_2 operator ^ ( int value0, const PsProtInt32_2 & value1  )
	{
		PsProtInt32_2 temp;
		PSA_PsProtInt32_2XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_2 &operator ^= ( PsProtInt32_2 value )
	{
		PSA_PsProtInt32_2XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_2 &operator ^= ( int value )
	{
		PSA_PsProtInt32_2XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt32_2 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( int value0, const PsProtInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt32_2 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( int value0, const PsProtInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( int value0, const PsProtInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( int value0, const PsProtInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( int value0, const PsProtInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( int value0, const PsProtInt32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_2CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt32_3ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_3CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt32_3
{
private:
	unsigned int m_value;

public:
	inline PsProtInt32_3()
	{
		PSA_PsProtInt32_3AssignXN( 0, 0, m_value );
	}

	inline PsProtInt32_3( int value )
	{
		PSA_PsProtInt32_3AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtInt32_3( const PsProtInt32_3 &value )
	{
		m_value = value.m_value;
	}

	inline operator int() const
	{
		unsigned int result;
		PSA_PsProtInt32_3ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline int Value() const
	{
		unsigned int result;
		PSA_PsProtInt32_3ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline PsProtInt32_3 &operator = ( int value )
	{
		PSA_PsProtInt32_3AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator = ( const PsProtInt32_3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt32_3 operator + ()
	{
		return *this;
	}

	inline PsProtInt32_3 operator - ()
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator ~ ()
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator ++ ()
	{
		PSA_PsProtInt32_3AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator ++ ( int )
	{
		PsProtInt32_3 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_3AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator -- ()
	{
		PSA_PsProtInt32_3SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator -- ( int )
	{
		PsProtInt32_3 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_3SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_3 operator + ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator + ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator + ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator += ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator += ( int value )
	{
		PSA_PsProtInt32_3AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator - ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator - ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator - ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator -= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator -= ( int value )
	{
		PSA_PsProtInt32_3SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator * ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator * ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator * ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator *= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator *= ( int value )
	{
		PSA_PsProtInt32_3MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator / ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator / ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator / ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator /= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator /= ( int value )
	{
		PSA_PsProtInt32_3DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator % ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator % ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator % ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator %= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator %= ( int value )
	{
		PSA_PsProtInt32_3RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator << ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator << ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator << ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator <<= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator <<= ( int value )
	{
		PSA_PsProtInt32_3ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator >> ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator >> ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator >> ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator >>= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator >>= ( int value )
	{
		PSA_PsProtInt32_3ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator & ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator & ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator & ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator &= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator &= ( int value )
	{
		PSA_PsProtInt32_3AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator | ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator | ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator | ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator |= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator |= ( int value )
	{
		PSA_PsProtInt32_3OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_3 operator ^ ( const PsProtInt32_3 & value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 operator ^ ( int value )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_3 operator ^ ( int value0, const PsProtInt32_3 & value1  )
	{
		PsProtInt32_3 temp;
		PSA_PsProtInt32_3XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_3 &operator ^= ( PsProtInt32_3 value )
	{
		PSA_PsProtInt32_3XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_3 &operator ^= ( int value )
	{
		PSA_PsProtInt32_3XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt32_3 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( int value0, const PsProtInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt32_3 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( int value0, const PsProtInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( int value0, const PsProtInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( int value0, const PsProtInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( int value0, const PsProtInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( int value0, const PsProtInt32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_3CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt32_4ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4RemEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4RemEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4RemNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4ShlEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4ShlEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4ShlNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4ShrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4ShrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4ShrNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4AndEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4AndEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4OrEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4OrEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4XorEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4XorEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtInt32_4CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt32_4
{
private:
	unsigned int m_value;

public:
	inline PsProtInt32_4()
	{
		PSA_PsProtInt32_4AssignXN( 0, 0, m_value );
	}

	inline PsProtInt32_4( int value )
	{
		PSA_PsProtInt32_4AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtInt32_4( const PsProtInt32_4 &value )
	{
		m_value = value.m_value;
	}

	inline operator int() const
	{
		unsigned int result;
		PSA_PsProtInt32_4ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline int Value() const
	{
		unsigned int result;
		PSA_PsProtInt32_4ConvertEX( m_value, 0, result );
		return *( int* )&result;
	}

	inline PsProtInt32_4 &operator = ( int value )
	{
		PSA_PsProtInt32_4AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator = ( const PsProtInt32_4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt32_4 operator + ()
	{
		return *this;
	}

	inline PsProtInt32_4 operator - ()
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator ~ ()
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4XorEN( m_value, ~0u, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator ++ ()
	{
		PSA_PsProtInt32_4AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator ++ ( int )
	{
		PsProtInt32_4 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_4AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator -- ()
	{
		PSA_PsProtInt32_4SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator -- ( int )
	{
		PsProtInt32_4 temp;
		temp.m_value = m_value;
		PSA_PsProtInt32_4SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt32_4 operator + ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator + ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator + ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator += ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator += ( int value )
	{
		PSA_PsProtInt32_4AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator - ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator - ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator - ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator -= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator -= ( int value )
	{
		PSA_PsProtInt32_4SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator * ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator * ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator * ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator *= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator *= ( int value )
	{
		PSA_PsProtInt32_4MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator / ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator / ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator / ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator /= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator /= ( int value )
	{
		PSA_PsProtInt32_4DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator % ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator % ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4RemEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator % ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4RemNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator %= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator %= ( int value )
	{
		PSA_PsProtInt32_4RemEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator << ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator << ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4ShlEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator << ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4ShlNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator <<= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator <<= ( int value )
	{
		PSA_PsProtInt32_4ShlEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator >> ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator >> ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4ShrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator >> ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4ShrNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator >>= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator >>= ( int value )
	{
		PSA_PsProtInt32_4ShrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator & ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator & ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4AndEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator & ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4AndEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator &= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator &= ( int value )
	{
		PSA_PsProtInt32_4AndEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator | ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator | ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4OrEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator | ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4OrEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator |= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator |= ( int value )
	{
		PSA_PsProtInt32_4OrEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtInt32_4 operator ^ ( const PsProtInt32_4 & value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 operator ^ ( int value )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4XorEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt32_4 operator ^ ( int value0, const PsProtInt32_4 & value1  )
	{
		PsProtInt32_4 temp;
		PSA_PsProtInt32_4XorEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt32_4 &operator ^= ( PsProtInt32_4 value )
	{
		PSA_PsProtInt32_4XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt32_4 &operator ^= ( int value )
	{
		PSA_PsProtInt32_4XorEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt32_4 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( int value0, const PsProtInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt32_4 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( int value0, const PsProtInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( int value0, const PsProtInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( int value0, const PsProtInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( int value0, const PsProtInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( int value )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( int value0, const PsProtInt32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtInt32_4CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif


// Protected classes

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt64_1ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_1CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt64_1
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtInt64_1()
	{
		PSA_PsProtInt64_1AssignXN( 0, 0, m_value );
	}

	inline PsProtInt64_1( __int64 value )
	{
		PSA_PsProtInt64_1AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtInt64_1( const PsProtInt64_1 &value )
	{
		m_value = value.m_value;
	}

	inline operator __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_1ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_1ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline PsProtInt64_1 &operator = ( __int64 value )
	{
		PSA_PsProtInt64_1AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator = ( const PsProtInt64_1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt64_1 operator + ()
	{
		return *this;
	}

	inline PsProtInt64_1 operator - ()
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator ~ ()
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator ++ ()
	{
		PSA_PsProtInt64_1AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator ++ ( int )
	{
		PsProtInt64_1 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_1AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator -- ()
	{
		PSA_PsProtInt64_1SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator -- ( int )
	{
		PsProtInt64_1 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_1SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_1 operator + ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator + ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator + ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator += ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator += ( __int64 value )
	{
		PSA_PsProtInt64_1AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator - ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator - ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator - ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator -= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator -= ( __int64 value )
	{
		PSA_PsProtInt64_1SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator * ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator * ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator * ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator *= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator *= ( __int64 value )
	{
		PSA_PsProtInt64_1MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator / ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator / ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator / ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator /= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator /= ( __int64 value )
	{
		PSA_PsProtInt64_1DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator % ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator % ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator % ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator %= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator %= ( __int64 value )
	{
		PSA_PsProtInt64_1RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator << ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator << ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator << ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator <<= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator <<= ( __int64 value )
	{
		PSA_PsProtInt64_1ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator >> ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator >> ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator >> ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator >>= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator >>= ( __int64 value )
	{
		PSA_PsProtInt64_1ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator & ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator & ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator & ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator &= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator &= ( __int64 value )
	{
		PSA_PsProtInt64_1AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator | ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator | ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator | ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator |= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator |= ( __int64 value )
	{
		PSA_PsProtInt64_1OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_1 operator ^ ( const PsProtInt64_1 & value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 operator ^ ( __int64 value )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_1 operator ^ ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		PsProtInt64_1 temp;
		PSA_PsProtInt64_1XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_1 &operator ^= ( PsProtInt64_1 value )
	{
		PSA_PsProtInt64_1XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_1 &operator ^= ( __int64 value )
	{
		PSA_PsProtInt64_1XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt64_1 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt64_1 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( __int64 value0, const PsProtInt64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_1CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt64_2ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_2CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt64_2
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtInt64_2()
	{
		PSA_PsProtInt64_2AssignXN( 0, 0, m_value );
	}

	inline PsProtInt64_2( __int64 value )
	{
		PSA_PsProtInt64_2AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtInt64_2( const PsProtInt64_2 &value )
	{
		m_value = value.m_value;
	}

	inline operator __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_2ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_2ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline PsProtInt64_2 &operator = ( __int64 value )
	{
		PSA_PsProtInt64_2AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator = ( const PsProtInt64_2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt64_2 operator + ()
	{
		return *this;
	}

	inline PsProtInt64_2 operator - ()
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator ~ ()
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator ++ ()
	{
		PSA_PsProtInt64_2AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator ++ ( int )
	{
		PsProtInt64_2 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_2AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator -- ()
	{
		PSA_PsProtInt64_2SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator -- ( int )
	{
		PsProtInt64_2 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_2SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_2 operator + ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator + ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator + ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator += ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator += ( __int64 value )
	{
		PSA_PsProtInt64_2AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator - ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator - ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator - ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator -= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator -= ( __int64 value )
	{
		PSA_PsProtInt64_2SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator * ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator * ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator * ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator *= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator *= ( __int64 value )
	{
		PSA_PsProtInt64_2MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator / ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator / ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator / ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator /= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator /= ( __int64 value )
	{
		PSA_PsProtInt64_2DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator % ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator % ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator % ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator %= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator %= ( __int64 value )
	{
		PSA_PsProtInt64_2RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator << ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator << ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator << ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator <<= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator <<= ( __int64 value )
	{
		PSA_PsProtInt64_2ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator >> ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator >> ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator >> ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator >>= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator >>= ( __int64 value )
	{
		PSA_PsProtInt64_2ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator & ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator & ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator & ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator &= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator &= ( __int64 value )
	{
		PSA_PsProtInt64_2AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator | ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator | ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator | ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator |= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator |= ( __int64 value )
	{
		PSA_PsProtInt64_2OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_2 operator ^ ( const PsProtInt64_2 & value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 operator ^ ( __int64 value )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_2 operator ^ ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		PsProtInt64_2 temp;
		PSA_PsProtInt64_2XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_2 &operator ^= ( PsProtInt64_2 value )
	{
		PSA_PsProtInt64_2XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_2 &operator ^= ( __int64 value )
	{
		PSA_PsProtInt64_2XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt64_2 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt64_2 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( __int64 value0, const PsProtInt64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_2CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt64_3ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_3CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt64_3
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtInt64_3()
	{
		PSA_PsProtInt64_3AssignXN( 0, 0, m_value );
	}

	inline PsProtInt64_3( __int64 value )
	{
		PSA_PsProtInt64_3AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtInt64_3( const PsProtInt64_3 &value )
	{
		m_value = value.m_value;
	}

	inline operator __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_3ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_3ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline PsProtInt64_3 &operator = ( __int64 value )
	{
		PSA_PsProtInt64_3AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator = ( const PsProtInt64_3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt64_3 operator + ()
	{
		return *this;
	}

	inline PsProtInt64_3 operator - ()
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator ~ ()
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator ++ ()
	{
		PSA_PsProtInt64_3AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator ++ ( int )
	{
		PsProtInt64_3 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_3AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator -- ()
	{
		PSA_PsProtInt64_3SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator -- ( int )
	{
		PsProtInt64_3 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_3SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_3 operator + ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator + ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator + ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator += ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator += ( __int64 value )
	{
		PSA_PsProtInt64_3AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator - ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator - ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator - ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator -= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator -= ( __int64 value )
	{
		PSA_PsProtInt64_3SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator * ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator * ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator * ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator *= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator *= ( __int64 value )
	{
		PSA_PsProtInt64_3MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator / ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator / ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator / ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator /= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator /= ( __int64 value )
	{
		PSA_PsProtInt64_3DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator % ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator % ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator % ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator %= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator %= ( __int64 value )
	{
		PSA_PsProtInt64_3RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator << ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator << ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator << ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator <<= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator <<= ( __int64 value )
	{
		PSA_PsProtInt64_3ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator >> ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator >> ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator >> ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator >>= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator >>= ( __int64 value )
	{
		PSA_PsProtInt64_3ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator & ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator & ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator & ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator &= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator &= ( __int64 value )
	{
		PSA_PsProtInt64_3AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator | ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator | ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator | ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator |= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator |= ( __int64 value )
	{
		PSA_PsProtInt64_3OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_3 operator ^ ( const PsProtInt64_3 & value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 operator ^ ( __int64 value )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_3 operator ^ ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		PsProtInt64_3 temp;
		PSA_PsProtInt64_3XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_3 &operator ^= ( PsProtInt64_3 value )
	{
		PSA_PsProtInt64_3XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_3 &operator ^= ( __int64 value )
	{
		PSA_PsProtInt64_3XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt64_3 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt64_3 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( __int64 value0, const PsProtInt64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_3CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtInt64_4ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4RemEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4RemEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4RemNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4ShlEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4ShlEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4ShlNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4ShrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4ShrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4ShrNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4AndEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4AndEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4OrEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4OrEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4XorEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4XorEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtInt64_4CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtInt64_4
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtInt64_4()
	{
		PSA_PsProtInt64_4AssignXN( 0, 0, m_value );
	}

	inline PsProtInt64_4( __int64 value )
	{
		PSA_PsProtInt64_4AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtInt64_4( const PsProtInt64_4 &value )
	{
		m_value = value.m_value;
	}

	inline operator __int64() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_4ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline __int64 Value() const
	{
		unsigned __int64 result;
		PSA_PsProtInt64_4ConvertEX( m_value, 0, result );
		return *( __int64* )&result;
	}

	inline PsProtInt64_4 &operator = ( __int64 value )
	{
		PSA_PsProtInt64_4AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator = ( const PsProtInt64_4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtInt64_4 operator + ()
	{
		return *this;
	}

	inline PsProtInt64_4 operator - ()
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4SubNE( 0, m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator ~ ()
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4XorEN( m_value, ~0ui64, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator ++ ()
	{
		PSA_PsProtInt64_4AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator ++ ( int )
	{
		PsProtInt64_4 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_4AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator -- ()
	{
		PSA_PsProtInt64_4SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator -- ( int )
	{
		PsProtInt64_4 temp;
		temp.m_value = m_value;
		PSA_PsProtInt64_4SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtInt64_4 operator + ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator + ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator + ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator += ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator += ( __int64 value )
	{
		PSA_PsProtInt64_4AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator - ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator - ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator - ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator -= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator -= ( __int64 value )
	{
		PSA_PsProtInt64_4SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator * ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator * ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator * ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator *= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator *= ( __int64 value )
	{
		PSA_PsProtInt64_4MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator / ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator / ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator / ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator /= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator /= ( __int64 value )
	{
		PSA_PsProtInt64_4DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator % ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4RemEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator % ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4RemEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator % ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4RemNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator %= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4RemEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator %= ( __int64 value )
	{
		PSA_PsProtInt64_4RemEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator << ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4ShlEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator << ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4ShlEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator << ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4ShlNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator <<= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4ShlEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator <<= ( __int64 value )
	{
		PSA_PsProtInt64_4ShlEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator >> ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4ShrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator >> ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4ShrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator >> ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4ShrNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator >>= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4ShrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator >>= ( __int64 value )
	{
		PSA_PsProtInt64_4ShrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator & ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4AndEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator & ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4AndEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator & ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4AndEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator &= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4AndEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator &= ( __int64 value )
	{
		PSA_PsProtInt64_4AndEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator | ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4OrEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator | ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4OrEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator | ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4OrEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator |= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4OrEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator |= ( __int64 value )
	{
		PSA_PsProtInt64_4OrEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtInt64_4 operator ^ ( const PsProtInt64_4 & value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4XorEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 operator ^ ( __int64 value )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4XorEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtInt64_4 operator ^ ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		PsProtInt64_4 temp;
		PSA_PsProtInt64_4XorEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtInt64_4 &operator ^= ( PsProtInt64_4 value )
	{
		PSA_PsProtInt64_4XorEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtInt64_4 &operator ^= ( __int64 value )
	{
		PSA_PsProtInt64_4XorEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtInt64_4 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtInt64_4 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtInt64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( __int64 value )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( __int64 value0, const PsProtInt64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtInt64_4CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif


// Protected classes

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat32_1ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_1CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat32_1
{
private:
	unsigned int m_value;

public:
	inline PsProtFloat32_1()
	{
		PSA_PsProtFloat32_1AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat32_1( float value )
	{
		PSA_PsProtFloat32_1AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtFloat32_1( const PsProtFloat32_1 &value )
	{
		m_value = value.m_value;
	}

	inline operator float() const
	{
		unsigned int result;
		PSA_PsProtFloat32_1ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline float Value() const
	{
		unsigned int result;
		PSA_PsProtFloat32_1ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline PsProtFloat32_1 &operator = ( float value )
	{
		PSA_PsProtFloat32_1AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 &operator = ( const PsProtFloat32_1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat32_1 operator + ()
	{
		return *this;
	}

	inline PsProtFloat32_1 operator - ()
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat32_1 &operator ++ ()
	{
		PSA_PsProtFloat32_1AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_1 operator ++ ( int )
	{
		PsProtFloat32_1 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_1AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_1 &operator -- ()
	{
		PSA_PsProtFloat32_1SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_1 operator -- ( int )
	{
		PsProtFloat32_1 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_1SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_1 operator + ( const PsProtFloat32_1 & value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 operator + ( float value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_1 operator + ( float value0, const PsProtFloat32_1 & value1  )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 &operator += ( PsProtFloat32_1 value )
	{
		PSA_PsProtFloat32_1AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 &operator += ( float value )
	{
		PSA_PsProtFloat32_1AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 operator - ( const PsProtFloat32_1 & value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 operator - ( float value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_1 operator - ( float value0, const PsProtFloat32_1 & value1  )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 &operator -= ( PsProtFloat32_1 value )
	{
		PSA_PsProtFloat32_1SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 &operator -= ( float value )
	{
		PSA_PsProtFloat32_1SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 operator * ( const PsProtFloat32_1 & value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 operator * ( float value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_1 operator * ( float value0, const PsProtFloat32_1 & value1  )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 &operator *= ( PsProtFloat32_1 value )
	{
		PSA_PsProtFloat32_1MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 &operator *= ( float value )
	{
		PSA_PsProtFloat32_1MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 operator / ( const PsProtFloat32_1 & value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 operator / ( float value )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_1 operator / ( float value0, const PsProtFloat32_1 & value1  )
	{
		PsProtFloat32_1 temp;
		PSA_PsProtFloat32_1DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_1 &operator /= ( PsProtFloat32_1 value )
	{
		PSA_PsProtFloat32_1DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_1 &operator /= ( float value )
	{
		PSA_PsProtFloat32_1DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat32_1 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( float value0, const PsProtFloat32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat32_1 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( float value0, const PsProtFloat32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( float value0, const PsProtFloat32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( float value0, const PsProtFloat32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( float value0, const PsProtFloat32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat32_1 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( float value0, const PsProtFloat32_1 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_1CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat32_2ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_2CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat32_2
{
private:
	unsigned int m_value;

public:
	inline PsProtFloat32_2()
	{
		PSA_PsProtFloat32_2AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat32_2( float value )
	{
		PSA_PsProtFloat32_2AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtFloat32_2( const PsProtFloat32_2 &value )
	{
		m_value = value.m_value;
	}

	inline operator float() const
	{
		unsigned int result;
		PSA_PsProtFloat32_2ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline float Value() const
	{
		unsigned int result;
		PSA_PsProtFloat32_2ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline PsProtFloat32_2 &operator = ( float value )
	{
		PSA_PsProtFloat32_2AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 &operator = ( const PsProtFloat32_2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat32_2 operator + ()
	{
		return *this;
	}

	inline PsProtFloat32_2 operator - ()
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat32_2 &operator ++ ()
	{
		PSA_PsProtFloat32_2AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_2 operator ++ ( int )
	{
		PsProtFloat32_2 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_2AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_2 &operator -- ()
	{
		PSA_PsProtFloat32_2SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_2 operator -- ( int )
	{
		PsProtFloat32_2 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_2SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_2 operator + ( const PsProtFloat32_2 & value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 operator + ( float value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_2 operator + ( float value0, const PsProtFloat32_2 & value1  )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 &operator += ( PsProtFloat32_2 value )
	{
		PSA_PsProtFloat32_2AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 &operator += ( float value )
	{
		PSA_PsProtFloat32_2AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 operator - ( const PsProtFloat32_2 & value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 operator - ( float value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_2 operator - ( float value0, const PsProtFloat32_2 & value1  )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 &operator -= ( PsProtFloat32_2 value )
	{
		PSA_PsProtFloat32_2SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 &operator -= ( float value )
	{
		PSA_PsProtFloat32_2SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 operator * ( const PsProtFloat32_2 & value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 operator * ( float value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_2 operator * ( float value0, const PsProtFloat32_2 & value1  )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 &operator *= ( PsProtFloat32_2 value )
	{
		PSA_PsProtFloat32_2MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 &operator *= ( float value )
	{
		PSA_PsProtFloat32_2MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 operator / ( const PsProtFloat32_2 & value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 operator / ( float value )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_2 operator / ( float value0, const PsProtFloat32_2 & value1  )
	{
		PsProtFloat32_2 temp;
		PSA_PsProtFloat32_2DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_2 &operator /= ( PsProtFloat32_2 value )
	{
		PSA_PsProtFloat32_2DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_2 &operator /= ( float value )
	{
		PSA_PsProtFloat32_2DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat32_2 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( float value0, const PsProtFloat32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat32_2 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( float value0, const PsProtFloat32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( float value0, const PsProtFloat32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( float value0, const PsProtFloat32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( float value0, const PsProtFloat32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat32_2 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( float value0, const PsProtFloat32_2 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_2CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat32_3ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_3CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat32_3
{
private:
	unsigned int m_value;

public:
	inline PsProtFloat32_3()
	{
		PSA_PsProtFloat32_3AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat32_3( float value )
	{
		PSA_PsProtFloat32_3AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtFloat32_3( const PsProtFloat32_3 &value )
	{
		m_value = value.m_value;
	}

	inline operator float() const
	{
		unsigned int result;
		PSA_PsProtFloat32_3ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline float Value() const
	{
		unsigned int result;
		PSA_PsProtFloat32_3ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline PsProtFloat32_3 &operator = ( float value )
	{
		PSA_PsProtFloat32_3AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 &operator = ( const PsProtFloat32_3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat32_3 operator + ()
	{
		return *this;
	}

	inline PsProtFloat32_3 operator - ()
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat32_3 &operator ++ ()
	{
		PSA_PsProtFloat32_3AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_3 operator ++ ( int )
	{
		PsProtFloat32_3 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_3AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_3 &operator -- ()
	{
		PSA_PsProtFloat32_3SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_3 operator -- ( int )
	{
		PsProtFloat32_3 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_3SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_3 operator + ( const PsProtFloat32_3 & value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 operator + ( float value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_3 operator + ( float value0, const PsProtFloat32_3 & value1  )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 &operator += ( PsProtFloat32_3 value )
	{
		PSA_PsProtFloat32_3AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 &operator += ( float value )
	{
		PSA_PsProtFloat32_3AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 operator - ( const PsProtFloat32_3 & value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 operator - ( float value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_3 operator - ( float value0, const PsProtFloat32_3 & value1  )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 &operator -= ( PsProtFloat32_3 value )
	{
		PSA_PsProtFloat32_3SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 &operator -= ( float value )
	{
		PSA_PsProtFloat32_3SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 operator * ( const PsProtFloat32_3 & value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 operator * ( float value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_3 operator * ( float value0, const PsProtFloat32_3 & value1  )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 &operator *= ( PsProtFloat32_3 value )
	{
		PSA_PsProtFloat32_3MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 &operator *= ( float value )
	{
		PSA_PsProtFloat32_3MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 operator / ( const PsProtFloat32_3 & value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 operator / ( float value )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_3 operator / ( float value0, const PsProtFloat32_3 & value1  )
	{
		PsProtFloat32_3 temp;
		PSA_PsProtFloat32_3DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_3 &operator /= ( PsProtFloat32_3 value )
	{
		PSA_PsProtFloat32_3DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_3 &operator /= ( float value )
	{
		PSA_PsProtFloat32_3DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat32_3 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( float value0, const PsProtFloat32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat32_3 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( float value0, const PsProtFloat32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( float value0, const PsProtFloat32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( float value0, const PsProtFloat32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( float value0, const PsProtFloat32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat32_3 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( float value0, const PsProtFloat32_3 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_3CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat32_4ConvertEX( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4AssignXN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4AddEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4AddEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4SubEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4SubEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4SubNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4MulEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4MulEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4DivEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4DivEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4DivNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CeqEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CltEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CltEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CltNE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CgtEE( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CgtEN( unsigned int value0, unsigned int value1, unsigned int& result );
unsigned __int32 __stdcall PSA_PsProtFloat32_4CgtNE( unsigned int value0, unsigned int value1, unsigned int& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat32_4
{
private:
	unsigned int m_value;

public:
	inline PsProtFloat32_4()
	{
		PSA_PsProtFloat32_4AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat32_4( float value )
	{
		PSA_PsProtFloat32_4AssignXN( 0, *( unsigned int* )&value, m_value );
	}

	inline PsProtFloat32_4( const PsProtFloat32_4 &value )
	{
		m_value = value.m_value;
	}

	inline operator float() const
	{
		unsigned int result;
		PSA_PsProtFloat32_4ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline float Value() const
	{
		unsigned int result;
		PSA_PsProtFloat32_4ConvertEX( m_value, 0, result );
		return *( float* )&result;
	}

	inline PsProtFloat32_4 &operator = ( float value )
	{
		PSA_PsProtFloat32_4AssignXN( 0, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 &operator = ( const PsProtFloat32_4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat32_4 operator + ()
	{
		return *this;
	}

	inline PsProtFloat32_4 operator - ()
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat32_4 &operator ++ ()
	{
		PSA_PsProtFloat32_4AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_4 operator ++ ( int )
	{
		PsProtFloat32_4 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_4AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_4 &operator -- ()
	{
		PSA_PsProtFloat32_4SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat32_4 operator -- ( int )
	{
		PsProtFloat32_4 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat32_4SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat32_4 operator + ( const PsProtFloat32_4 & value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 operator + ( float value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4AddEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_4 operator + ( float value0, const PsProtFloat32_4 & value1  )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4AddEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 &operator += ( PsProtFloat32_4 value )
	{
		PSA_PsProtFloat32_4AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 &operator += ( float value )
	{
		PSA_PsProtFloat32_4AddEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 operator - ( const PsProtFloat32_4 & value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 operator - ( float value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4SubEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_4 operator - ( float value0, const PsProtFloat32_4 & value1  )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4SubNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 &operator -= ( PsProtFloat32_4 value )
	{
		PSA_PsProtFloat32_4SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 &operator -= ( float value )
	{
		PSA_PsProtFloat32_4SubEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 operator * ( const PsProtFloat32_4 & value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 operator * ( float value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4MulEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_4 operator * ( float value0, const PsProtFloat32_4 & value1  )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4MulEN( value1.m_value, *( unsigned int* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 &operator *= ( PsProtFloat32_4 value )
	{
		PSA_PsProtFloat32_4MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 &operator *= ( float value )
	{
		PSA_PsProtFloat32_4MulEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 operator / ( const PsProtFloat32_4 & value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 operator / ( float value )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4DivEN( m_value, *( unsigned int* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat32_4 operator / ( float value0, const PsProtFloat32_4 & value1  )
	{
		PsProtFloat32_4 temp;
		PSA_PsProtFloat32_4DivNE( *( unsigned int* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat32_4 &operator /= ( PsProtFloat32_4 value )
	{
		PSA_PsProtFloat32_4DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat32_4 &operator /= ( float value )
	{
		PSA_PsProtFloat32_4DivEN( m_value, *( unsigned int* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat32_4 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( float value0, const PsProtFloat32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat32_4 & value )
	{
		unsigned int temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CeqEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( float value0, const PsProtFloat32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CeqEN( value1.m_value, *( unsigned int* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( float value0, const PsProtFloat32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( float value0, const PsProtFloat32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CgtEN( m_value, *( unsigned int* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( float value0, const PsProtFloat32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CgtNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat32_4 & value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( float value )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CltEN( m_value, *( unsigned int* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( float value0, const PsProtFloat32_4 & value1  )
	{
		unsigned int temp;
		PSA_PsProtFloat32_4CltNE( *( unsigned int* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif


// Protected classes

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat64_1ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_1CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat64_1
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtFloat64_1()
	{
		PSA_PsProtFloat64_1AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat64_1( double value )
	{
		PSA_PsProtFloat64_1AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtFloat64_1( const PsProtFloat64_1 &value )
	{
		m_value = value.m_value;
	}

	inline operator double() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_1ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline double Value() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_1ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline PsProtFloat64_1 &operator = ( double value )
	{
		PSA_PsProtFloat64_1AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 &operator = ( const PsProtFloat64_1 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat64_1 operator + ()
	{
		return *this;
	}

	inline PsProtFloat64_1 operator - ()
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat64_1 &operator ++ ()
	{
		PSA_PsProtFloat64_1AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_1 operator ++ ( int )
	{
		PsProtFloat64_1 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_1AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_1 &operator -- ()
	{
		PSA_PsProtFloat64_1SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_1 operator -- ( int )
	{
		PsProtFloat64_1 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_1SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_1 operator + ( const PsProtFloat64_1 & value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 operator + ( double value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_1 operator + ( double value0, const PsProtFloat64_1 & value1  )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 &operator += ( PsProtFloat64_1 value )
	{
		PSA_PsProtFloat64_1AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 &operator += ( double value )
	{
		PSA_PsProtFloat64_1AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 operator - ( const PsProtFloat64_1 & value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 operator - ( double value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_1 operator - ( double value0, const PsProtFloat64_1 & value1  )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 &operator -= ( PsProtFloat64_1 value )
	{
		PSA_PsProtFloat64_1SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 &operator -= ( double value )
	{
		PSA_PsProtFloat64_1SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 operator * ( const PsProtFloat64_1 & value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 operator * ( double value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_1 operator * ( double value0, const PsProtFloat64_1 & value1  )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 &operator *= ( PsProtFloat64_1 value )
	{
		PSA_PsProtFloat64_1MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 &operator *= ( double value )
	{
		PSA_PsProtFloat64_1MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 operator / ( const PsProtFloat64_1 & value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 operator / ( double value )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_1 operator / ( double value0, const PsProtFloat64_1 & value1  )
	{
		PsProtFloat64_1 temp;
		PSA_PsProtFloat64_1DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_1 &operator /= ( PsProtFloat64_1 value )
	{
		PSA_PsProtFloat64_1DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_1 &operator /= ( double value )
	{
		PSA_PsProtFloat64_1DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat64_1 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( double value0, const PsProtFloat64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat64_1 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( double value0, const PsProtFloat64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( double value0, const PsProtFloat64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( double value0, const PsProtFloat64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( double value0, const PsProtFloat64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat64_1 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( double value0, const PsProtFloat64_1 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_1CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat64_2ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_2CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat64_2
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtFloat64_2()
	{
		PSA_PsProtFloat64_2AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat64_2( double value )
	{
		PSA_PsProtFloat64_2AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtFloat64_2( const PsProtFloat64_2 &value )
	{
		m_value = value.m_value;
	}

	inline operator double() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_2ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline double Value() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_2ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline PsProtFloat64_2 &operator = ( double value )
	{
		PSA_PsProtFloat64_2AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 &operator = ( const PsProtFloat64_2 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat64_2 operator + ()
	{
		return *this;
	}

	inline PsProtFloat64_2 operator - ()
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat64_2 &operator ++ ()
	{
		PSA_PsProtFloat64_2AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_2 operator ++ ( int )
	{
		PsProtFloat64_2 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_2AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_2 &operator -- ()
	{
		PSA_PsProtFloat64_2SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_2 operator -- ( int )
	{
		PsProtFloat64_2 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_2SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_2 operator + ( const PsProtFloat64_2 & value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 operator + ( double value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_2 operator + ( double value0, const PsProtFloat64_2 & value1  )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 &operator += ( PsProtFloat64_2 value )
	{
		PSA_PsProtFloat64_2AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 &operator += ( double value )
	{
		PSA_PsProtFloat64_2AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 operator - ( const PsProtFloat64_2 & value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 operator - ( double value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_2 operator - ( double value0, const PsProtFloat64_2 & value1  )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 &operator -= ( PsProtFloat64_2 value )
	{
		PSA_PsProtFloat64_2SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 &operator -= ( double value )
	{
		PSA_PsProtFloat64_2SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 operator * ( const PsProtFloat64_2 & value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 operator * ( double value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_2 operator * ( double value0, const PsProtFloat64_2 & value1  )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 &operator *= ( PsProtFloat64_2 value )
	{
		PSA_PsProtFloat64_2MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 &operator *= ( double value )
	{
		PSA_PsProtFloat64_2MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 operator / ( const PsProtFloat64_2 & value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 operator / ( double value )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_2 operator / ( double value0, const PsProtFloat64_2 & value1  )
	{
		PsProtFloat64_2 temp;
		PSA_PsProtFloat64_2DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_2 &operator /= ( PsProtFloat64_2 value )
	{
		PSA_PsProtFloat64_2DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_2 &operator /= ( double value )
	{
		PSA_PsProtFloat64_2DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat64_2 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( double value0, const PsProtFloat64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat64_2 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( double value0, const PsProtFloat64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( double value0, const PsProtFloat64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( double value0, const PsProtFloat64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( double value0, const PsProtFloat64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat64_2 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( double value0, const PsProtFloat64_2 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_2CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat64_3ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_3CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat64_3
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtFloat64_3()
	{
		PSA_PsProtFloat64_3AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat64_3( double value )
	{
		PSA_PsProtFloat64_3AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtFloat64_3( const PsProtFloat64_3 &value )
	{
		m_value = value.m_value;
	}

	inline operator double() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_3ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline double Value() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_3ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline PsProtFloat64_3 &operator = ( double value )
	{
		PSA_PsProtFloat64_3AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 &operator = ( const PsProtFloat64_3 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat64_3 operator + ()
	{
		return *this;
	}

	inline PsProtFloat64_3 operator - ()
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat64_3 &operator ++ ()
	{
		PSA_PsProtFloat64_3AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_3 operator ++ ( int )
	{
		PsProtFloat64_3 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_3AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_3 &operator -- ()
	{
		PSA_PsProtFloat64_3SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_3 operator -- ( int )
	{
		PsProtFloat64_3 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_3SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_3 operator + ( const PsProtFloat64_3 & value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 operator + ( double value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_3 operator + ( double value0, const PsProtFloat64_3 & value1  )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 &operator += ( PsProtFloat64_3 value )
	{
		PSA_PsProtFloat64_3AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 &operator += ( double value )
	{
		PSA_PsProtFloat64_3AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 operator - ( const PsProtFloat64_3 & value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 operator - ( double value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_3 operator - ( double value0, const PsProtFloat64_3 & value1  )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 &operator -= ( PsProtFloat64_3 value )
	{
		PSA_PsProtFloat64_3SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 &operator -= ( double value )
	{
		PSA_PsProtFloat64_3SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 operator * ( const PsProtFloat64_3 & value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 operator * ( double value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_3 operator * ( double value0, const PsProtFloat64_3 & value1  )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 &operator *= ( PsProtFloat64_3 value )
	{
		PSA_PsProtFloat64_3MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 &operator *= ( double value )
	{
		PSA_PsProtFloat64_3MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 operator / ( const PsProtFloat64_3 & value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 operator / ( double value )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_3 operator / ( double value0, const PsProtFloat64_3 & value1  )
	{
		PsProtFloat64_3 temp;
		PSA_PsProtFloat64_3DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_3 &operator /= ( PsProtFloat64_3 value )
	{
		PSA_PsProtFloat64_3DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_3 &operator /= ( double value )
	{
		PSA_PsProtFloat64_3DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat64_3 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( double value0, const PsProtFloat64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat64_3 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( double value0, const PsProtFloat64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( double value0, const PsProtFloat64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( double value0, const PsProtFloat64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( double value0, const PsProtFloat64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat64_3 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( double value0, const PsProtFloat64_3 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_3CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

// Internal functions for protected class
unsigned __int32 __stdcall PSA_PsProtFloat64_4ConvertEX( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4AssignXN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4AddEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4AddEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4SubEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4SubEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4SubNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4MulEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4MulEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4DivEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4DivEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4DivNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CeqEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CltEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CltEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CltNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CgtEE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CgtEN( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );
unsigned __int32 __stdcall PSA_PsProtFloat64_4CgtNE( unsigned __int64 value0, unsigned __int64 value1, unsigned __int64& result );

#ifdef __cplusplus
#ifdef SDK

class PsProtFloat64_4
{
private:
	unsigned __int64 m_value;

public:
	inline PsProtFloat64_4()
	{
		PSA_PsProtFloat64_4AssignXN( 0, 0, m_value );
	}

	inline PsProtFloat64_4( double value )
	{
		PSA_PsProtFloat64_4AssignXN( 0, *( unsigned __int64* )&value, m_value );
	}

	inline PsProtFloat64_4( const PsProtFloat64_4 &value )
	{
		m_value = value.m_value;
	}

	inline operator double() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_4ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline double Value() const
	{
		unsigned __int64 result;
		PSA_PsProtFloat64_4ConvertEX( m_value, 0, result );
		return *( double* )&result;
	}

	inline PsProtFloat64_4 &operator = ( double value )
	{
		PSA_PsProtFloat64_4AssignXN( 0, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 &operator = ( const PsProtFloat64_4 &value )
	{
		m_value = value.m_value;
		return *this;
	}

	inline PsProtFloat64_4 operator + ()
	{
		return *this;
	}

	inline PsProtFloat64_4 operator - ()
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4SubNE( 0, m_value, temp.m_value );
		return temp;
	}


	inline PsProtFloat64_4 &operator ++ ()
	{
		PSA_PsProtFloat64_4AddEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_4 operator ++ ( int )
	{
		PsProtFloat64_4 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_4AddEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_4 &operator -- ()
	{
		PSA_PsProtFloat64_4SubEN( m_value, 1, m_value );
		return *this;
	}

	inline PsProtFloat64_4 operator -- ( int )
	{
		PsProtFloat64_4 temp;
		temp.m_value = m_value;
		PSA_PsProtFloat64_4SubEN( m_value, 1, m_value );
		return temp;
	}

	inline PsProtFloat64_4 operator + ( const PsProtFloat64_4 & value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4AddEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 operator + ( double value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4AddEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_4 operator + ( double value0, const PsProtFloat64_4 & value1  )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4AddEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 &operator += ( PsProtFloat64_4 value )
	{
		PSA_PsProtFloat64_4AddEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 &operator += ( double value )
	{
		PSA_PsProtFloat64_4AddEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 operator - ( const PsProtFloat64_4 & value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4SubEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 operator - ( double value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4SubEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_4 operator - ( double value0, const PsProtFloat64_4 & value1  )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4SubNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 &operator -= ( PsProtFloat64_4 value )
	{
		PSA_PsProtFloat64_4SubEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 &operator -= ( double value )
	{
		PSA_PsProtFloat64_4SubEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 operator * ( const PsProtFloat64_4 & value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4MulEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 operator * ( double value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4MulEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_4 operator * ( double value0, const PsProtFloat64_4 & value1  )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4MulEN( value1.m_value, *( unsigned __int64* )&value0, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 &operator *= ( PsProtFloat64_4 value )
	{
		PSA_PsProtFloat64_4MulEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 &operator *= ( double value )
	{
		PSA_PsProtFloat64_4MulEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 operator / ( const PsProtFloat64_4 & value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4DivEE( m_value, value.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 operator / ( double value )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4DivEN( m_value, *( unsigned __int64* )&value, temp.m_value );
		return temp;
	}

	inline friend PsProtFloat64_4 operator / ( double value0, const PsProtFloat64_4 & value1  )
	{
		PsProtFloat64_4 temp;
		PSA_PsProtFloat64_4DivNE( *( unsigned __int64* )&value0, value1.m_value, temp.m_value );
		return temp;
	}

	inline PsProtFloat64_4 &operator /= ( PsProtFloat64_4 value )
	{
		PSA_PsProtFloat64_4DivEE( m_value, value.m_value, m_value );
		return *this;
	}

	inline PsProtFloat64_4 &operator /= ( double value )
	{
		PSA_PsProtFloat64_4DivEN( m_value, *( unsigned __int64* )&value, m_value );
		return *this;
	}

	inline bool operator == ( const PsProtFloat64_4 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value == value.m_value );
		return 0 != temp;
	}

	inline bool operator == ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator == ( double value0, const PsProtFloat64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 != temp;
	}

	inline bool operator != ( const PsProtFloat64_4 & value )
	{
		unsigned __int64 temp;
		temp = 0 != ( m_value != value.m_value );
		return 0 != temp;
	}

	inline bool operator != ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CeqEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator != ( double value0, const PsProtFloat64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CeqEN( value1.m_value, *( unsigned __int64* )&value0, temp );
		return 0 == temp;
	}

	inline bool operator < ( const PsProtFloat64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CltEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator < ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator < ( double value0, const PsProtFloat64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator <= ( const PsProtFloat64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CgtEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator <= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator <= ( double value0, const PsProtFloat64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

	inline bool operator > ( const PsProtFloat64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CgtEE( m_value, value.m_value, temp );
		return 0 != temp;
	}

	inline bool operator > ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CgtEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 != temp;
	}

	inline friend bool operator > ( double value0, const PsProtFloat64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CgtNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 != temp;
	}

	inline bool operator >= ( const PsProtFloat64_4 & value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CltEE( m_value, value.m_value, temp );
		return 0 == temp;
	}

	inline bool operator >= ( double value )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CltEN( m_value, *( unsigned __int64* )&value, temp );
		return 0 == temp;
	}

	inline friend bool operator >= ( double value0, const PsProtFloat64_4 & value1  )
	{
		unsigned __int64 temp;
		PSA_PsProtFloat64_4CltNE( *( unsigned __int64* )&value0, value1.m_value, temp );
		return 0 == temp;
	}

};

#endif
#endif

