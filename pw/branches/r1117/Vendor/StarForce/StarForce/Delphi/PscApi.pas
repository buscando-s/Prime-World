//
//  PscApi.pas
//
//  File description:
//      Header file for core API functions. These functions can be used in
//      initialization module. These functions MUST NOT be used in protected
//      application.
//
//  Notes:
//      Detailed info about functions and parameters see in PscApi.h.
//

unit PscApi;

interface

uses
  Windows;

// Additional constants and definitions
{$I PsConfig}
{$I PsConstants}

// Additional types
type
  Size_T = Cardinal;
  PSize_T = ^Size_T;

//
//	Common initialization functions
//

// Start initialization (first service)
function PSC_StartInitialization(
  initializationType: Longword
  ): Longword; stdcall; external 'sakijapi.dll';

// Finish initialization
function PSC_FinishInitializationSuccess:
  Longword; stdcall; external 'sakijapi.dll';

// Finish initialization
function PSC_FinishInitializationFailure:
  Longword; stdcall; external 'sakijapi.dll';

// Uninitialization (last service)
function PSC_Uninitialize:
  Longword; stdcall; external 'sakijapi.dll';

// Additional initialization at valid license
function PSC_PerformInitializationAtValidLicense:
  Longword; stdcall; external 'sakijapi.dll';

// Initialization in demo mode
{$IFDEF PS_DEMO_MODE_SUPPORTED}
function PSC_InitializeDemoMode:
  Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

//
//	Miscellaneous functions
//

// Get detailed error information
function PSC_GetErrorInformation(
  infoBuffer: PLongword;
  infoBufferSizeInElements: PSize_T;
  usedKeyBuffer: PAnsiChar;
  usedKeyBufferSizeInChars: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Get license identifier
{$IFDEF PS_USE_LICENSES}
function PSC_GetLicenseId(
  identifier: PLongword
  ): Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

// Load localized string
function PSC_LoadString(
  stringId: Longword;
  stringBuffer: PWideChar;
  stringBufferSizeInWideChars: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Enter global critical section (for license access)
function PSC_EnterGlobalCriticalSection:
  Longword; stdcall; external 'sakijapi.dll';

// Leave global critical section (for license access)
function PSC_LeaveGlobalCriticalSection:
  Longword; stdcall; external 'sakijapi.dll';

//
//	Functions for disc-based initialization
//

{$IF Defined( PS_DISC_BASED_INITIALIZATION_SUPPORTED ) or Defined( PS_DISC_WITH_BACKUP_BASED_INITIALIZATION_SUPPORTED )}

// Search disc and get label
function PSC_DiscSearchDisc2(
  labelBuffer: PAnsiChar;
  labelBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Try to load disc license from registry
function PSC_DiscLoadLicenseFromRegistry(
  keyBuffer: PAnsiChar;
  keyBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Try to create disc license based on key written on the disc
function PSC_DiscCreateLicenseFromDisc:
  Longword; stdcall; external 'sakijapi.dll';

// Test key and if it is valid create license and write it into system registry
function PSC_DiscTestNewKeyAndWriteLicenseForValidDiscKey(
  key: PAnsiChar
  ): Longword; stdcall; external 'sakijapi.dll';

// Try rescue license (optionally preserve existed disc license)
function PSC_DiscTryRescueLicense(
  restoreExistedDiscLicenseOnError: Boolean
  ): Longword; stdcall; external 'sakijapi.dll';

// Create or load rescue license and get hardware code
function PSC_DiscCreateOrLoadRescueLicenseAndGetHardwareCode(
  hardwareCodeBuffer: PAnsiChar;
  hardwareCodeBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Activate loaded rescue license
function PSC_DiscActivateAndStoreRescueLicense(
  key: PAnsiChar
  ): Longword; stdcall; external 'sakijapi.dll';

// Try disc license (i.e. check disc)
function PSC_DiscTryDiscLicense:
  Longword; stdcall; external 'sakijapi.dll';

// Create autogenerated license
{$IFDEF PS_BIND_TO_HARDWARE_AFTER_CD_SUCCESS}
function PSC_DiscCreateAutogeneratedLicense:
  Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

// Try to check autogenerated license
{$IFDEF PS_BIND_TO_HARDWARE_AFTER_CD_SUCCESS}
function PSC_DiscTryAutogeneratedLicense:
  Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

{$IFEND}

//
//	Functions for computer-based initalization (activation)
//

{$IF Defined( PS_HARDWARE_BASED_INITIALIZATION_SUPPORTED ) or Defined( PS_DISC_WITH_BACKUP_BASED_INITIALIZATION_SUPPORTED )}

// Try to create/check trial license
{$IFDEF PS_TRIAL_PERIOD_SUPPORTED}
function PSC_HardwareTryTrialLicense(
  createIfAbsent: Boolean
  ): Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

// Validate entered license number
function PSC_ValidateLicenseNumber(
  licenseNumber: PAnsiChar;
  encodingId: PLongword
  ): Longword; stdcall; external 'sakijapi.dll';

// Try to check normal license
function PSC_HardwareTryNormalLicense(
  licenseNumber: PAnsiChar
  ): Longword; stdcall; external 'sakijapi.dll';

// Create or load license, get hardware code
function PSC_HardwareCreateOrLoadNormalLicenseAndGetHardwareCode(
  licenseNumber: PAnsiChar;
  hardwareCodeBuffer: PAnsiChar;
  hardwareCodeBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Activate current license
function PSC_HardwareActivateAndStoreNormalLicense(
  key: PAnsiChar
  ): Longword; stdcall; external 'sakijapi.dll';

// Deactivate current license
{$IFDEF OPTION_ENABLE_DEACTIVATION}
function PSC_HardwareDeactivateLicense(
  licenseNumber: PAnsiChar;
  hardwareCodeBuffer: PAnsiChar;
  hardwareCodeBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

{$IFEND}

//
//	Functions for server-based initialization
//

{$IFDEF PS_SERVER_BASED_INITIALIZATION_CLIENT}

// Initialize new session
function PSC_SrvBndClientInitializeSession(
  sessionGuid: TUuid
  ): Longword; stdcall; external 'sakijapi.dll';

// Start session (get or restore license from server)
function PSC_SrvBndClientStartSession:
  Longword; stdcall; external 'sakijapi.dll';

// Approve session
function PSC_SrvBndClientApproveSession:
  Longword; stdcall; external 'sakijapi.dll';

// Finish and deinitialize session (get license back to the server and free resources)
function PSC_SrvBndClientFinishAndDeinitializeSession:
  Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}

{$IFDEF PS_SERVER_BASED_INITIALIZATION_SERVER}

// Process request
function PSC_SrvBndServerProcessRequest(
  languageId: Longword;
  requestDataBuffer: PAnsiChar;
  requestDataBufferSize: Size_T;
  responseDataBuffer: PAnsiChar;
  responseDataBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}

{$IFDEF PS_REMOTE_SERVER_BASED_INITIALIZATION_SUPPORTED}

// Start session (get or restore license from server)
function PSC_RemoteServerStartSession:
  Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}


//
// Functions for external binding initialization
//

{$IFDEF PS_EXTERNAL_BASED_INITIALIZATION_SUPPORTED}

// Perform external binding check
function PSC_ExternalBindingCheck:
  Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}

//
//	Hidden info remover (these functions are not accessible in user interface project)
//

{$IFDEF TRIAL_INFO_REMOVER}

// Remove trial information
{$IFDEF PS_TRIAL_PERIOD_SUPPORTED}
function PSC_RemoveTrial:
  Longword; stdcall; external 'sakijapi.dll';
{$ENDIF}

// Remove history of license usage (number of runs, time of last run etc.)
function PSC_RemoveHistory:
  Longword; stdcall; external 'sakijapi.dll';

// Remove all licenses including history
function PSC_RemoveAllLicenses:
  Longword; stdcall; external 'sakijapi.dll';

// Remove hidden information about deactivated licenses
function PSC_RemoveHiddenDeactivationInfo:
  Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}

//
//	Protection of documents
//

{$IFDEF OPTION_DATA_FILES_PROTECTION}

// Try to open document
function PSC_HardwareCheckDocument(
  fileHandle: THandle;
  documentId: PLongword;
  errorCode: PLongword
  ): Longword; stdcall; external 'sakijapi.dll';

// Try to check normal license
function PSC_HardwareTryDocumentLicense(
  fileHandle: THandle;
  documentId: PLongword;
  licenseNumber: PAnsiChar;
  errorCode: PLongword
  ): Longword; stdcall; external 'sakijapi.dll';

// Create or load license, get hardware code
function PSC_HardwareCreateOrLoadDocumentLicenseAndGetHardwareCode(
  documentId: PLongword;
  licenseNumber: PAnsiChar;
  hardwareCodeBuffer: PAnsiChar;
  hardwareCodeBufferSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Activate current license
function PSC_HardwareActivateAndStoreDocumentLicense(
  key: PAnsiChar
  ): Longword; stdcall; external 'sakijapi.dll';

// Open protected document (complex function implemented in user interface project)
function PSC_DocumentOpen(
  documentFile: THandle
  ): Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}

//
//	Protection of documents (these functions are not accessible in user interface project)
//

{$IFDEF OPTION_DATA_FILES_PROTECTION}

// Get size of protected document (hidden function: not exported from sakijapi.dll in final version)
function PSC_DocumentGetSize(
  documentFile: THandle;
  documentSize: PSize_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Get data (hidden function: not exported from sakijapi.dll in final version)
function PSC_DocumentGetData(
  documentFile: THandle;
  dataBuffer: Pointer;
  dataOffset: Size_T;
  dataSize: Size_T
  ): Longword; stdcall; external 'sakijapi.dll';

// Close protected document (hidden function: not exported from sakijapi.dll in final version)
function PSC_DocumentClose(
  documentFile: THandle
  ): Longword; stdcall; external 'sakijapi.dll';

{$ENDIF}

implementation

// No implementation

end.

